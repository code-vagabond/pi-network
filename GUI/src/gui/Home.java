/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Viktor
 */
public class Home extends javax.swing.JFrame {
org.rmi.client.User current;
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        this.current = new org.rmi.client.User();
    }
    public Home(org.rmi.client.User current) {
        this.current = current;
        initComponents();
        userLogedInLabel.setText(current.username);
        current.currentWindow = this;
        homePanel.setVisible(true);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
        this.cross = new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"));
        this.tick = new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"));
        GroupsAddListeners();
        usersFindFriendsAllUsers.addListSelectionListener(new FindFriendsListenHandler());
        usersMyFriendsList.addListSelectionListener(new MyFriendsListenHandler());
        fillValues();
        userData();
        MyProfileAddListeners();
        SendMessageAddListeners();
        ChangePasswordAddListeners();
        ReadMessageAddListeners();
        WritePostAddListeners();
        ReadPostsAddListeners();
        EditPostsAddListeners();
        newGroupPanel.setVisible(false);
        allGroupsPanel.setVisible(false);
        myGroupsPanel.setVisible(false);
        usersFindFriendsPanel.setVisible(false);
        usersMyFriendsPanel.setVisible(false);
        myProfileOptionButtonsPanel.setVisible(true);
        myProfileChangeDataPanel.setVisible(false);
        myProfileChangePasswordPanel.setVisible(false);
        messagesSendMessagesPanel.setVisible(false);
        messagesReadMessagesPanel.setVisible(false);
        readPostsPanel.setVisible(false);
        writePostsPanel.setVisible(false);
        editPostsPanel.setVisible(false);
        topFiveMessagesFillValues();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.ButtonGroup();
        groupButtons = new javax.swing.ButtonGroup();
        allGroupsOrderButtons = new javax.swing.ButtonGroup();
        myGroupsOrderButtons = new javax.swing.ButtonGroup();
        findFriendsOrderButtons = new javax.swing.ButtonGroup();
        myFriendsFriendshipTypesButtons = new javax.swing.ButtonGroup();
        myFriendsOrderButtons = new javax.swing.ButtonGroup();
        userNavigationButtons = new javax.swing.ButtonGroup();
        messagesNavgationButtons = new javax.swing.ButtonGroup();
        sendMessagesNavigationButtons = new javax.swing.ButtonGroup();
        readMessagesNavigationButtons = new javax.swing.ButtonGroup();
        postsButtons = new javax.swing.ButtonGroup();
        writePostsNavigationButtons = new javax.swing.ButtonGroup();
        homeButton = new javax.swing.JToggleButton();
        myProfileButton = new javax.swing.JToggleButton();
        groupsButton = new javax.swing.JToggleButton();
        usersButton = new javax.swing.JToggleButton();
        messagesButton = new javax.swing.JToggleButton();
        postsButton = new javax.swing.JToggleButton();
        statsButton = new javax.swing.JToggleButton();
        logOutButton = new javax.swing.JToggleButton();
        homePanel = new javax.swing.JPanel();
        userLogedInLabel = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        homeMessageAutorLabel1 = new javax.swing.JLabel();
        homeMessageTopicLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        homeMessageText1 = new javax.swing.JTextArea();
        homeMessageDateLabel1 = new javax.swing.JLabel();
        homeMessageStatusLabel1 = new javax.swing.JLabel();
        homeMessageAutor1 = new javax.swing.JLabel();
        homeMessageTopic1 = new javax.swing.JLabel();
        homeMessageDate1 = new javax.swing.JLabel();
        homeMessageStatus1 = new javax.swing.JLabel();
        homeMessageAutorLabel2 = new javax.swing.JLabel();
        homeMessageTopicLabel2 = new javax.swing.JLabel();
        homeMessageAutor2 = new javax.swing.JLabel();
        homeMessageTopic2 = new javax.swing.JLabel();
        homeMessageDateLabel2 = new javax.swing.JLabel();
        homeMessageStatusLabel2 = new javax.swing.JLabel();
        homeMessageDate2 = new javax.swing.JLabel();
        homeMessageStatus2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        homeMessageText2 = new javax.swing.JTextArea();
        homeMessageAutorLabel3 = new javax.swing.JLabel();
        homeMessageTopicLabel3 = new javax.swing.JLabel();
        homeMessageAutor3 = new javax.swing.JLabel();
        homeMessageTopic3 = new javax.swing.JLabel();
        homeMessageDateLabel3 = new javax.swing.JLabel();
        homeMessageStatusLabel3 = new javax.swing.JLabel();
        homeMessageDate3 = new javax.swing.JLabel();
        homeMessageStatus3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        homeMessageText3 = new javax.swing.JTextArea();
        homeMessageAutorLabel4 = new javax.swing.JLabel();
        homeMessageTopicLabel4 = new javax.swing.JLabel();
        homeMessageAutor4 = new javax.swing.JLabel();
        homeMessageTopic4 = new javax.swing.JLabel();
        homeMessageDateLabel4 = new javax.swing.JLabel();
        homeMessageStatusLabel4 = new javax.swing.JLabel();
        homeMessageDate4 = new javax.swing.JLabel();
        homeMessageStatus4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        homeMessageText4 = new javax.swing.JTextArea();
        homeMessageAutorLabel5 = new javax.swing.JLabel();
        homeMessageTopicLabel5 = new javax.swing.JLabel();
        homeMessageAutor5 = new javax.swing.JLabel();
        homeMessageTopic5 = new javax.swing.JLabel();
        homeMessageDateLabel5 = new javax.swing.JLabel();
        homeMessageStatusLabel5 = new javax.swing.JLabel();
        homeMessageDate5 = new javax.swing.JLabel();
        homeMessageStatus5 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        homeMessageText5 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        messagesPanel = new javax.swing.JPanel();
        messagesSendMessagesButton = new javax.swing.JToggleButton();
        messagesReadMessagesButton = new javax.swing.JToggleButton();
        messagesReadMessagesPanel = new javax.swing.JPanel();
        messagesReadMesagesAllMessagesScrollPane = new javax.swing.JScrollPane();
        messagesReadMesagesAllMessages = new javax.swing.JTable()
        ;
        messagesReadMessagesMessageTitleLabel = new javax.swing.JLabel();
        messagesReadMessagesMessageAutorLabel = new javax.swing.JLabel();
        messagesReadMessagesMessageDateLabel = new javax.swing.JLabel();
        messagesReadMessagesMessageTextLabel = new javax.swing.JLabel();
        messagesReadMessagesMessageTitle = new javax.swing.JLabel();
        messagesReadMessagesMessageAutor = new javax.swing.JLabel();
        messagesReadMessagesMessageDate = new javax.swing.JLabel();
        messagesReadMessagesMessageTextScrollPane = new javax.swing.JScrollPane();
        messagesReadMessagesMessageText = new javax.swing.JTextArea();
        messagesReadMessagesMessageReadButton = new javax.swing.JButton();
        messagesReadMessagesDeleteMessageButton1 = new javax.swing.JButton();
        messagesSendMessagesPanel = new javax.swing.JPanel();
        messagesSendMessagesAdresseeLabel = new javax.swing.JLabel();
        messagesSendMessagesMessageLabel = new javax.swing.JLabel();
        messagesSendMessagesMessageTitle = new javax.swing.JTextField();
        messagesSendMessagesMessageScrollPane = new javax.swing.JScrollPane();
        messagesSendMessagesMessage = new javax.swing.JTextArea();
        messagesSendMessageShowFriendsListRadioButton = new javax.swing.JRadioButton();
        messagesSendMessagesShowGroupsradioButton = new javax.swing.JRadioButton();
        messagesSendMessagesAdresseeScrollPane = new javax.swing.JScrollPane();
        messagesSendMessagesAdresseeList = new javax.swing.JList();
        messagesSendMessagesAddAdresseeButton = new javax.swing.JButton();
        messagesSendMessagesDeleteAdresseeButton = new javax.swing.JButton();
        messagesSendMessagesSendLabel = new javax.swing.JLabel();
        messagesSendMessagesSendToAllFriendsButton = new javax.swing.JButton();
        messagesSendMessagesSendToAdresseeListButton = new javax.swing.JButton();
        messagesSendMessagesTitleCheck = new javax.swing.JLabel();
        messagesSendMessagesMessageCheck = new javax.swing.JLabel();
        messagesSendMessagesPotentialAdresseeScrollPane = new javax.swing.JScrollPane();
        messagesSendMessagesPotentialAdresseeList = new javax.swing.JList();
        messagesSendMessagesMessageTitleLabel = new javax.swing.JLabel();
        postsPanel = new javax.swing.JPanel();
        writePostsButton = new javax.swing.JToggleButton();
        readPostsButton = new javax.swing.JToggleButton();
        editPostsButton = new javax.swing.JToggleButton();
        writePostsPanel = new javax.swing.JPanel();
        postsWritePostsTitleLabel = new javax.swing.JLabel();
        postWritePostsPostPrivateRadioButton = new javax.swing.JRadioButton();
        postWritePostsPostPublicRadioButton = new javax.swing.JRadioButton();
        postsWritePostsTopicLabel = new javax.swing.JLabel();
        postsWritePostsTopic = new javax.swing.JTextField();
        postsWritePostsTextLabel = new javax.swing.JLabel();
        postsWritePostsTextScrollPane = new javax.swing.JScrollPane();
        postsWritePostsText = new javax.swing.JTextArea();
        postsWritePostsSendPostButton = new javax.swing.JButton();
        postWritePostsTopicCheck = new javax.swing.JLabel();
        postWritePostsTextCheck = new javax.swing.JLabel();
        readPostsPanel = new javax.swing.JPanel();
        postsReadPostsVoteButton = new javax.swing.JButton();
        postsReadPostsUsernameLabel = new javax.swing.JLabel();
        postsReadPostsUsername = new javax.swing.JTextField();
        postsReadPostsSearchUsernameButton = new javax.swing.JButton();
        postsReadPostsDateLabel = new javax.swing.JLabel();
        postsReadPostsAutorLabel = new javax.swing.JLabel();
        postsReadPostsTopicLabel = new javax.swing.JLabel();
        postsReadPostsTextLabel = new javax.swing.JLabel();
        postsReadPostsDate = new javax.swing.JLabel();
        postsReadPostsAutor = new javax.swing.JLabel();
        postsReadPostsTopic = new javax.swing.JLabel();
        postsReadPostsTextLabelScrollPane = new javax.swing.JScrollPane();
        postsReadPostsText = new javax.swing.JTextArea();
        postsReadPostsAllPostsScrollPane = new javax.swing.JScrollPane();
        postsReadPostsAllPosts = new javax.swing.JTable(){
            public boolean isCellEditable(int x, int y){
                return false;
            }
        };
        editPostsPanel = new javax.swing.JPanel();
        postsEditPostsMyPostsScrollPane = new javax.swing.JScrollPane();
        postsEditPostsMyPosts = new javax.swing.JTable();
        postsEditPostsDateLabel = new javax.swing.JLabel();
        postsEditPostsTopicLabel = new javax.swing.JLabel();
        postsEditPostsTextLabel = new javax.swing.JLabel();
        postsEditPostsDate = new javax.swing.JLabel();
        postsEditPostsTopic = new javax.swing.JTextField();
        postsEditPostsTextScrollPane = new javax.swing.JScrollPane();
        postsEditPostsText = new javax.swing.JTextArea();
        postsEditPostsDeletePostButton = new javax.swing.JButton();
        postsEditPostsSendPostButton = new javax.swing.JButton();
        postsEditPostsTextCheck = new javax.swing.JLabel();
        postsEditPostsTopicCheck = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        usersPanel = new javax.swing.JPanel();
        usersFindFriendsButton = new javax.swing.JToggleButton();
        usersMyFriendsButton = new javax.swing.JToggleButton();
        usersMyFriendsPanel = new javax.swing.JPanel();
        usersMyFriendsScrollPane = new javax.swing.JScrollPane();
        usersMyFriendsList = new javax.swing.JList();
        usersMyFriendsUsernameLabel = new javax.swing.JLabel();
        usersMyFriendsFirstNameLabel = new javax.swing.JLabel();
        usersMyFriendsFamilyNameLabel = new javax.swing.JLabel();
        usersMyFriendsDescriptionLabel = new javax.swing.JLabel();
        usersMyFriendsUsername = new javax.swing.JLabel();
        usersMyFriendsFirstName = new javax.swing.JLabel();
        usersMyFriendsFamilyName = new javax.swing.JLabel();
        javax.swing.JScrollPane usersMyFriendsDescriptionScrollPane = new javax.swing.JScrollPane();
        usersMyFriendsDescription = new javax.swing.JTextArea();
        usersMyFriendsUnfriendButton = new javax.swing.JButton();
        usersMyFriendsDoubledFriendshipsRadioButton = new javax.swing.JRadioButton();
        usersMyFriendsMeUserFriendshipsRadioButton = new javax.swing.JRadioButton();
        usersMyFriendsUserMeFriendshipsRadioButton = new javax.swing.JRadioButton();
        usersMyFriendsSortLabel = new javax.swing.JLabel();
        usersMyFriendsAscendingOrderRadioButton = new javax.swing.JRadioButton();
        usersMyFriendsDescendingOrderRadioButton = new javax.swing.JRadioButton();
        usersFindFriendsPanel = new javax.swing.JPanel();
        usersFindFriendsAllUsersScrollPane = new javax.swing.JScrollPane();
        usersFindFriendsAllUsers = new javax.swing.JList();
        usersFindFriendsSearchLabel = new javax.swing.JLabel();
        usersFindFriendsFamilyNameLabel = new javax.swing.JLabel();
        usersFindFriendsDescriptionLabel = new javax.swing.JLabel();
        usersFindFriendsUsername = new javax.swing.JLabel();
        usersFindFriendsFirstName = new javax.swing.JLabel();
        usersFindFriendsFamilyName = new javax.swing.JLabel();
        usersFindFriendsDescriptionScrollPane = new javax.swing.JScrollPane();
        usersFindFriendsDescription = new javax.swing.JTextArea();
        usersFindFriendsBefriendButton = new javax.swing.JButton();
        usersFindFriendsUsernameLabel = new javax.swing.JLabel();
        usersFindFriendsFirstNameLabel = new javax.swing.JLabel();
        usersFindFriendsSearchTextField = new javax.swing.JTextField();
        usersFindFriendsSearchUsernameButton = new javax.swing.JButton();
        usersFindFriendsSearchEMailButton = new javax.swing.JButton();
        userFindFriendsAscendingOrder = new javax.swing.JRadioButton();
        usersFindFriendsDescendingOrder = new javax.swing.JRadioButton();
        usersFindFriendsSortLabel = new javax.swing.JLabel();
        myProfilePanel = new javax.swing.JPanel();
        myProfileProfileDataPanel = new javax.swing.JPanel();
        myProfileOptionButtonsPanel = new javax.swing.JPanel();
        myProfileChangeData = new javax.swing.JButton();
        myProfileChangePassword = new javax.swing.JButton();
        myProfileDeleteAccount = new javax.swing.JButton();
        myProfileFirstName = new javax.swing.JTextField();
        myProfileFamilyName = new javax.swing.JTextField();
        myProfileFirstNameLabel = new javax.swing.JLabel();
        myProfileEMailLabel = new javax.swing.JLabel();
        myProfileBirthmonth = new javax.swing.JTextField();
        myProfileTitelLabel = new javax.swing.JLabel();
        myProfileBirthday = new javax.swing.JTextField();
        myProfileBirthyear = new javax.swing.JTextField();
        myProfileFailyNameLabel = new javax.swing.JLabel();
        myProfileBirthdateLabel = new javax.swing.JLabel();
        myProfileDescriptionLabel = new javax.swing.JLabel();
        myProfileDescriptionScrollPane = new javax.swing.JScrollPane();
        myProfileDescription = new javax.swing.JTextArea();
        myProfileEMail = new javax.swing.JTextField();
        myProfileChangeDataPanel = new javax.swing.JPanel();
        myProfileFirstNameCheck = new javax.swing.JLabel();
        myProfileFamilyNameCheck = new javax.swing.JLabel();
        myProfileEMailCheck = new javax.swing.JLabel();
        myProfileBirthdayCheck = new javax.swing.JLabel();
        myProfileDescriptionCheck = new javax.swing.JLabel();
        myProfileSubmitButton = new javax.swing.JButton();
        myProfileBackButton = new javax.swing.JButton();
        myProfileChangePasswordPanel = new javax.swing.JPanel();
        myProfileChangePasswordNewPasswordLabel = new javax.swing.JLabel();
        changePasswordTitleLabel = new javax.swing.JLabel();
        myProfileChangePasswordNewPasswordRepeatLabel = new javax.swing.JLabel();
        myProfileChangePasswordOldPasswordLabel = new javax.swing.JLabel();
        myProfileChangePasswordNewPasswordCheck = new javax.swing.JLabel();
        myProfileChangePasswordNewPasswordRepeatCheck = new javax.swing.JLabel();
        myProfileChangePasswordSubmit = new javax.swing.JButton();
        myProfileChangePasswordBack = new javax.swing.JButton();
        myProfileChangePasswordOldPassword = new javax.swing.JPasswordField();
        myProfileChangePasswordNewPassword = new javax.swing.JPasswordField();
        myProfileChangePasswordNewPasswordRepeat = new javax.swing.JPasswordField();
        groupsPanel = new javax.swing.JPanel();
        myGroupsButton = new javax.swing.JToggleButton();
        allGroupsButton = new javax.swing.JToggleButton();
        newGroupsButton = new javax.swing.JToggleButton();
        myGroupsPanel = new javax.swing.JPanel();
        myGroupsTitleLabel = new javax.swing.JLabel();
        allGroupsListScrollPane = new javax.swing.JScrollPane();
        allGroupsList = new javax.swing.JList();
        myGroupsGroupName = new javax.swing.JLabel();
        myGroupsMemberLabel = new javax.swing.JLabel();
        myGroupsDescriptionScrollPane = new javax.swing.JScrollPane();
        myGroupsDescription = new javax.swing.JTextArea();
        myGroupsLeaveGroup = new javax.swing.JButton();
        myGroupsGroupNameLabel = new javax.swing.JLabel();
        myGroupsGroupDescriptionLabel = new javax.swing.JLabel();
        myGroupsMembersListScrollPane = new javax.swing.JScrollPane();
        myGroupsMembersList = new javax.swing.JList();
        myGroupsSortLabel = new javax.swing.JLabel();
        myGroupsAscendingOrder = new javax.swing.JRadioButton();
        myGroupsDescendingOrder = new javax.swing.JRadioButton();
        newGroupPanel = new javax.swing.JPanel();
        newGroupTitleLabel = new javax.swing.JLabel();
        newGroupGroupNameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        newGroupGroupName = new javax.swing.JTextField();
        newGroupGroupDescriptionScrollPane = new javax.swing.JScrollPane();
        newGroupGroupDescription = new javax.swing.JTextArea();
        newGroupGroupNameCheck = new javax.swing.JLabel();
        newGroupGroupDescritionCheck = new javax.swing.JLabel();
        newGroupCreateGroup = new javax.swing.JButton();
        allGroupsPanel = new javax.swing.JPanel();
        allGroupsTitleLabel = new javax.swing.JLabel();
        allGroupsGroupListScrollPane = new javax.swing.JScrollPane();
        allGroupsGroupLists = new javax.swing.JList();
        allGroupsGroupName = new javax.swing.JLabel();
        allGroupsGroupDescriptionLabel = new javax.swing.JLabel();
        allGroupsGroupDescriptionScrollPane = new javax.swing.JScrollPane();
        allGroupsGroupDescription = new javax.swing.JTextArea();
        allGroupsJoinGroup = new javax.swing.JButton();
        allGroupsGroupSearchLabel = new javax.swing.JLabel();
        allGroupsGroupNameLabel = new javax.swing.JLabel();
        allGroupsGroupToSearch = new javax.swing.JTextField();
        allGroupsSearchButton = new javax.swing.JButton();
        allGroupsSortLabel = new javax.swing.JLabel();
        allGroupsAscendingOrder = new javax.swing.JRadioButton();
        allGroupsDescendingOrder = new javax.swing.JRadioButton();
        statsPanel = new javax.swing.JPanel();
        statsMyGroups = new javax.swing.JLabel();
        statsUsersOnlineLabel = new javax.swing.JLabel();
        statsTotalUsersLabel = new javax.swing.JLabel();
        statsTotalGroupsLabel = new javax.swing.JLabel();
        statsTotalGroups = new javax.swing.JLabel();
        statsMyGroupsLabel = new javax.swing.JLabel();
        statsUsersOnline = new javax.swing.JLabel();
        statsUserMeFriendshipsLabel = new javax.swing.JLabel();
        statsDoubledFriendshipLabel = new javax.swing.JLabel();
        statsTotalUsers = new javax.swing.JLabel();
        statsMeUserFriendshipsLabel = new javax.swing.JLabel();
        statsMeUserFriendships = new javax.swing.JLabel();
        statsDoubledFriendship = new javax.swing.JLabel();
        statsUserMeFriendships = new javax.swing.JLabel();
        statsUserStatsLabel = new javax.swing.JLabel();
        statsGroupStatsLabel = new javax.swing.JLabel();
        statsFriendshipStatsLabel = new javax.swing.JLabel();
        defaultModelPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 660));
        getContentPane().setLayout(null);

        menuBar.add(homeButton);
        homeButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        homeButton.setForeground(new java.awt.Color(0, 204, 204));
        homeButton.setSelected(true);
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(homeButton);
        homeButton.setBounds(0, 0, 128, 30);

        menuBar.add(myProfileButton);
        myProfileButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        myProfileButton.setForeground(new java.awt.Color(0, 204, 204));
        myProfileButton.setText("Mein Profil");
        myProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileButtonActionPerformed(evt);
            }
        });
        getContentPane().add(myProfileButton);
        myProfileButton.setBounds(128, 0, 128, 30);

        menuBar.add(groupsButton);
        groupsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        groupsButton.setForeground(new java.awt.Color(0, 204, 204));
        groupsButton.setText("Gruppen");
        groupsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(groupsButton);
        groupsButton.setBounds(256, 0, 128, 30);

        menuBar.add(usersButton);
        usersButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        usersButton.setForeground(new java.awt.Color(0, 204, 204));
        usersButton.setText("Benutzer");
        usersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersButtonActionPerformed(evt);
            }
        });
        getContentPane().add(usersButton);
        usersButton.setBounds(384, 0, 128, 30);

        menuBar.add(messagesButton);
        messagesButton.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        messagesButton.setForeground(new java.awt.Color(0, 204, 204));
        messagesButton.setText("Nachrichten");
        messagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(messagesButton);
        messagesButton.setBounds(512, 0, 128, 30);

        menuBar.add(postsButton);
        postsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        postsButton.setForeground(new java.awt.Color(0, 204, 204));
        postsButton.setText("Posts");
        postsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(postsButton);
        postsButton.setBounds(640, 0, 128, 30);

        menuBar.add(statsButton);
        statsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        statsButton.setForeground(new java.awt.Color(0, 204, 204));
        statsButton.setText("Statistiken");
        statsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(statsButton);
        statsButton.setBounds(768, 0, 128, 30);

        menuBar.add(logOutButton);
        logOutButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(0, 204, 204));
        logOutButton.setText("Logout");
        logOutButton.setToolTipText("");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        getContentPane().add(logOutButton);
        logOutButton.setBounds(896, 0, 128, 30);

        homePanel.setOpaque(false);
        homePanel.setLayout(null);

        userLogedInLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        userLogedInLabel.setForeground(new java.awt.Color(0, 204, 204));
        userLogedInLabel.setText("user!");
        homePanel.add(userLogedInLabel);
        userLogedInLabel.setBounds(630, 60, 380, 50);

        welcomeLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(0, 204, 204));
        welcomeLabel.setText("Willkommen in PiNet,");
        homePanel.add(welcomeLabel);
        welcomeLabel.setBounds(230, 60, 400, 50);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 255, 255));
        jLabel1.setText("Letzte 5 Nachrichten");
        homePanel.add(jLabel1);
        jLabel1.setBounds(180, 130, 150, 19);

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 255, 255));
        jLabel2.setText("Letzte 5 Posts");
        homePanel.add(jLabel2);
        jLabel2.setBounds(700, 130, 110, 19);

        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);

        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(450, 1000));
        jPanel2.setLayout(null);

        homeMessageAutorLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutorLabel1.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageAutorLabel1.setText("Autor:");
        jPanel2.add(homeMessageAutorLabel1);
        homeMessageAutorLabel1.setBounds(20, 10, 100, 25);

        homeMessageTopicLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopicLabel1.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageTopicLabel1.setText("Thema:");
        jPanel2.add(homeMessageTopicLabel1);
        homeMessageTopicLabel1.setBounds(140, 10, 100, 25);

        homeMessageText1.setEditable(false);
        homeMessageText1.setColumns(18);
        homeMessageText1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        homeMessageText1.setLineWrap(true);
        homeMessageText1.setRows(5);
        homeMessageText1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(homeMessageText1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(130, 80, 320, 90);

        homeMessageDateLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDateLabel1.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageDateLabel1.setText("Datum:");
        jPanel2.add(homeMessageDateLabel1);
        homeMessageDateLabel1.setBounds(20, 90, 100, 25);

        homeMessageStatusLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageStatusLabel1.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageStatusLabel1.setText("Status:");
        jPanel2.add(homeMessageStatusLabel1);
        homeMessageStatusLabel1.setBounds(330, 10, 100, 25);

        homeMessageAutor1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutor1.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageAutor1.setText("Autor");
        jPanel2.add(homeMessageAutor1);
        homeMessageAutor1.setBounds(20, 40, 100, 25);

        homeMessageTopic1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopic1.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageTopic1.setText("Thema");
        jPanel2.add(homeMessageTopic1);
        homeMessageTopic1.setBounds(140, 40, 170, 25);

        homeMessageDate1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDate1.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageDate1.setText("Datum");
        jPanel2.add(homeMessageDate1);
        homeMessageDate1.setBounds(20, 120, 100, 25);

        homeMessageStatus1.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        homeMessageStatus1.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageStatus1.setText("Status");
        jPanel2.add(homeMessageStatus1);
        homeMessageStatus1.setBounds(330, 40, 80, 25);

        homeMessageAutorLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutorLabel2.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageAutorLabel2.setText("Autor:");
        jPanel2.add(homeMessageAutorLabel2);
        homeMessageAutorLabel2.setBounds(20, 210, 100, 25);

        homeMessageTopicLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopicLabel2.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageTopicLabel2.setText("Thema:");
        jPanel2.add(homeMessageTopicLabel2);
        homeMessageTopicLabel2.setBounds(140, 210, 100, 25);

        homeMessageAutor2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutor2.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageAutor2.setText("Autor");
        jPanel2.add(homeMessageAutor2);
        homeMessageAutor2.setBounds(20, 240, 100, 25);

        homeMessageTopic2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopic2.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageTopic2.setText("Thema");
        jPanel2.add(homeMessageTopic2);
        homeMessageTopic2.setBounds(140, 240, 170, 25);

        homeMessageDateLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDateLabel2.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageDateLabel2.setText("Datum:");
        jPanel2.add(homeMessageDateLabel2);
        homeMessageDateLabel2.setBounds(20, 290, 100, 25);

        homeMessageStatusLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageStatusLabel2.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageStatusLabel2.setText("Status:");
        jPanel2.add(homeMessageStatusLabel2);
        homeMessageStatusLabel2.setBounds(330, 210, 100, 25);

        homeMessageDate2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDate2.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageDate2.setText("Datum");
        jPanel2.add(homeMessageDate2);
        homeMessageDate2.setBounds(20, 320, 100, 25);

        homeMessageStatus2.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        homeMessageStatus2.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageStatus2.setText("Status");
        jPanel2.add(homeMessageStatus2);
        homeMessageStatus2.setBounds(330, 240, 80, 25);

        homeMessageText2.setEditable(false);
        homeMessageText2.setColumns(18);
        homeMessageText2.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        homeMessageText2.setLineWrap(true);
        homeMessageText2.setRows(5);
        homeMessageText2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(homeMessageText2);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(130, 280, 320, 90);

        homeMessageAutorLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutorLabel3.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageAutorLabel3.setText("Autor:");
        jPanel2.add(homeMessageAutorLabel3);
        homeMessageAutorLabel3.setBounds(20, 410, 100, 25);

        homeMessageTopicLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopicLabel3.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageTopicLabel3.setText("Thema:");
        jPanel2.add(homeMessageTopicLabel3);
        homeMessageTopicLabel3.setBounds(140, 410, 100, 25);

        homeMessageAutor3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutor3.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageAutor3.setText("Autor");
        jPanel2.add(homeMessageAutor3);
        homeMessageAutor3.setBounds(20, 440, 100, 25);

        homeMessageTopic3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopic3.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageTopic3.setText("Thema");
        jPanel2.add(homeMessageTopic3);
        homeMessageTopic3.setBounds(140, 440, 170, 25);

        homeMessageDateLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDateLabel3.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageDateLabel3.setText("Datum:");
        jPanel2.add(homeMessageDateLabel3);
        homeMessageDateLabel3.setBounds(20, 490, 100, 25);

        homeMessageStatusLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageStatusLabel3.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageStatusLabel3.setText("Status:");
        jPanel2.add(homeMessageStatusLabel3);
        homeMessageStatusLabel3.setBounds(330, 410, 100, 25);

        homeMessageDate3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDate3.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageDate3.setText("Datum");
        jPanel2.add(homeMessageDate3);
        homeMessageDate3.setBounds(20, 520, 100, 25);

        homeMessageStatus3.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        homeMessageStatus3.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageStatus3.setText("Status");
        jPanel2.add(homeMessageStatus3);
        homeMessageStatus3.setBounds(330, 440, 80, 25);

        homeMessageText3.setEditable(false);
        homeMessageText3.setColumns(18);
        homeMessageText3.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        homeMessageText3.setLineWrap(true);
        homeMessageText3.setRows(5);
        homeMessageText3.setWrapStyleWord(true);
        jScrollPane5.setViewportView(homeMessageText3);

        jPanel2.add(jScrollPane5);
        jScrollPane5.setBounds(130, 480, 320, 90);

        homeMessageAutorLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutorLabel4.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageAutorLabel4.setText("Autor:");
        jPanel2.add(homeMessageAutorLabel4);
        homeMessageAutorLabel4.setBounds(20, 610, 100, 25);

        homeMessageTopicLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopicLabel4.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageTopicLabel4.setText("Thema:");
        jPanel2.add(homeMessageTopicLabel4);
        homeMessageTopicLabel4.setBounds(140, 610, 100, 25);

        homeMessageAutor4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutor4.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageAutor4.setText("Autor");
        jPanel2.add(homeMessageAutor4);
        homeMessageAutor4.setBounds(20, 640, 100, 25);

        homeMessageTopic4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopic4.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageTopic4.setText("Thema");
        jPanel2.add(homeMessageTopic4);
        homeMessageTopic4.setBounds(140, 640, 170, 25);

        homeMessageDateLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDateLabel4.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageDateLabel4.setText("Datum:");
        jPanel2.add(homeMessageDateLabel4);
        homeMessageDateLabel4.setBounds(20, 690, 100, 25);

        homeMessageStatusLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageStatusLabel4.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageStatusLabel4.setText("Status:");
        jPanel2.add(homeMessageStatusLabel4);
        homeMessageStatusLabel4.setBounds(330, 610, 100, 25);

        homeMessageDate4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDate4.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageDate4.setText("Datum");
        jPanel2.add(homeMessageDate4);
        homeMessageDate4.setBounds(20, 720, 100, 25);

        homeMessageStatus4.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        homeMessageStatus4.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageStatus4.setText("Status");
        jPanel2.add(homeMessageStatus4);
        homeMessageStatus4.setBounds(330, 640, 80, 25);

        homeMessageText4.setEditable(false);
        homeMessageText4.setColumns(18);
        homeMessageText4.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        homeMessageText4.setLineWrap(true);
        homeMessageText4.setRows(5);
        homeMessageText4.setWrapStyleWord(true);
        jScrollPane6.setViewportView(homeMessageText4);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(130, 680, 320, 90);

        homeMessageAutorLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutorLabel5.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageAutorLabel5.setText("Autor:");
        jPanel2.add(homeMessageAutorLabel5);
        homeMessageAutorLabel5.setBounds(20, 810, 100, 25);

        homeMessageTopicLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopicLabel5.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageTopicLabel5.setText("Thema:");
        jPanel2.add(homeMessageTopicLabel5);
        homeMessageTopicLabel5.setBounds(140, 810, 100, 25);

        homeMessageAutor5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageAutor5.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageAutor5.setText("Autor");
        jPanel2.add(homeMessageAutor5);
        homeMessageAutor5.setBounds(20, 840, 100, 25);

        homeMessageTopic5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageTopic5.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageTopic5.setText("Thema");
        jPanel2.add(homeMessageTopic5);
        homeMessageTopic5.setBounds(140, 840, 170, 25);

        homeMessageDateLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDateLabel5.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageDateLabel5.setText("Datum:");
        jPanel2.add(homeMessageDateLabel5);
        homeMessageDateLabel5.setBounds(20, 890, 100, 25);

        homeMessageStatusLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageStatusLabel5.setForeground(new java.awt.Color(0, 153, 153));
        homeMessageStatusLabel5.setText("Status:");
        jPanel2.add(homeMessageStatusLabel5);
        homeMessageStatusLabel5.setBounds(330, 810, 100, 25);

        homeMessageDate5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homeMessageDate5.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageDate5.setText("Datum");
        jPanel2.add(homeMessageDate5);
        homeMessageDate5.setBounds(20, 920, 100, 25);

        homeMessageStatus5.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        homeMessageStatus5.setForeground(new java.awt.Color(51, 255, 255));
        homeMessageStatus5.setText("Status");
        jPanel2.add(homeMessageStatus5);
        homeMessageStatus5.setBounds(330, 840, 80, 25);

        homeMessageText5.setEditable(false);
        homeMessageText5.setColumns(18);
        homeMessageText5.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        homeMessageText5.setLineWrap(true);
        homeMessageText5.setRows(5);
        homeMessageText5.setWrapStyleWord(true);
        jScrollPane7.setViewportView(homeMessageText5);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(130, 880, 320, 90);

        jScrollPane2.setViewportView(jPanel2);

        homePanel.add(jScrollPane2);
        jScrollPane2.setBounds(30, 160, 470, 450);

        jScrollPane4.setOpaque(false);
        jScrollPane4.getViewport().setOpaque(false);

        jPanel4.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(450, 1000));
        jScrollPane4.setViewportView(jPanel4);

        homePanel.add(jScrollPane4);
        jScrollPane4.setBounds(520, 160, 470, 450);

        getContentPane().add(homePanel);
        homePanel.setBounds(0, 0, 1010, 630);

        messagesPanel.setOpaque(false);
        messagesPanel.setLayout(null);

        messagesNavgationButtons.add(messagesSendMessagesButton);
        messagesSendMessagesButton.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        messagesSendMessagesButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesButton.setText("Senden");
        messagesSendMessagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesSendMessagesButtonActionPerformed(evt);
            }
        });
        messagesPanel.add(messagesSendMessagesButton);
        messagesSendMessagesButton.setBounds(448, 35, 128, 30);

        messagesNavgationButtons.add(messagesReadMessagesButton);
        messagesReadMessagesButton.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        messagesReadMessagesButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesReadMessagesButton.setText("Lesen");
        messagesReadMessagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesReadMessagesButtonActionPerformed(evt);
            }
        });
        messagesPanel.add(messagesReadMessagesButton);
        messagesReadMessagesButton.setBounds(576, 35, 128, 30);

        messagesReadMessagesPanel.setForeground(new java.awt.Color(0, 153, 153));
        messagesReadMessagesPanel.setOpaque(false);
        messagesReadMessagesPanel.setLayout(null);

        messagesReadMesagesAllMessages.setAutoCreateRowSorter(true);
        messagesReadMesagesAllMessages.setDragEnabled(true);
        messagesReadMesagesAllMessages.setOpaque(false);
        messagesReadMesagesAllMessagesScrollPane.setViewportView(messagesReadMesagesAllMessages);

        messagesReadMessagesPanel.add(messagesReadMesagesAllMessagesScrollPane);
        messagesReadMesagesAllMessagesScrollPane.setBounds(30, 90, 452, 510);

        messagesReadMessagesMessageTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageTitleLabel.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesMessageTitleLabel.setText("Thema:");
        messagesReadMessagesPanel.add(messagesReadMessagesMessageTitleLabel);
        messagesReadMessagesMessageTitleLabel.setBounds(550, 90, 90, 30);

        messagesReadMessagesMessageAutorLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageAutorLabel.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesMessageAutorLabel.setText("Autor:");
        messagesReadMessagesPanel.add(messagesReadMessagesMessageAutorLabel);
        messagesReadMessagesMessageAutorLabel.setBounds(550, 140, 90, 30);

        messagesReadMessagesMessageDateLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageDateLabel.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesMessageDateLabel.setText("Datum:");
        messagesReadMessagesPanel.add(messagesReadMessagesMessageDateLabel);
        messagesReadMessagesMessageDateLabel.setBounds(550, 190, 90, 30);

        messagesReadMessagesMessageTextLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageTextLabel.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesMessageTextLabel.setText("Text:");
        messagesReadMessagesPanel.add(messagesReadMessagesMessageTextLabel);
        messagesReadMessagesMessageTextLabel.setBounds(550, 240, 90, 23);

        messagesReadMessagesMessageTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageTitle.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesPanel.add(messagesReadMessagesMessageTitle);
        messagesReadMessagesMessageTitle.setBounds(650, 90, 320, 30);

        messagesReadMessagesMessageAutor.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageAutor.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesPanel.add(messagesReadMessagesMessageAutor);
        messagesReadMessagesMessageAutor.setBounds(650, 140, 320, 30);

        messagesReadMessagesMessageDate.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageDate.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesPanel.add(messagesReadMessagesMessageDate);
        messagesReadMessagesMessageDate.setBounds(650, 190, 320, 30);

        messagesReadMessagesMessageText.setColumns(20);
        messagesReadMessagesMessageText.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageText.setForeground(new java.awt.Color(51, 255, 255));
        messagesReadMessagesMessageText.setRows(5);
        messagesReadMessagesMessageTextScrollPane.setViewportView(messagesReadMessagesMessageText);

        messagesReadMessagesPanel.add(messagesReadMessagesMessageTextScrollPane);
        messagesReadMessagesMessageTextScrollPane.setBounds(650, 250, 326, 300);

        messagesReadMessagesMessageReadButton.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesMessageReadButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesReadMessagesMessageReadButton.setText("als gelesen markieren");
        messagesReadMessagesMessageReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesReadMessagesMessageReadButtonActionPerformed(evt);
            }
        });
        messagesReadMessagesPanel.add(messagesReadMessagesMessageReadButton);
        messagesReadMessagesMessageReadButton.setBounds(510, 560, 250, 31);

        messagesReadMessagesDeleteMessageButton1.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesReadMessagesDeleteMessageButton1.setForeground(new java.awt.Color(0, 153, 153));
        messagesReadMessagesDeleteMessageButton1.setText("Nachricht löschen");
        messagesReadMessagesDeleteMessageButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesReadMessagesDeleteMessageButton1ActionPerformed(evt);
            }
        });
        messagesReadMessagesPanel.add(messagesReadMessagesDeleteMessageButton1);
        messagesReadMessagesDeleteMessageButton1.setBounds(765, 560, 210, 31);

        messagesPanel.add(messagesReadMessagesPanel);
        messagesReadMessagesPanel.setBounds(0, 0, 1010, 630);

        messagesSendMessagesPanel.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesPanel.setOpaque(false);
        messagesSendMessagesPanel.setLayout(null);

        messagesSendMessagesAdresseeLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesSendMessagesAdresseeLabel.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesAdresseeLabel.setText("Empfängerliste");
        messagesSendMessagesPanel.add(messagesSendMessagesAdresseeLabel);
        messagesSendMessagesAdresseeLabel.setBounds(660, 360, 310, 23);

        messagesSendMessagesMessageLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesSendMessagesMessageLabel.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesMessageLabel.setText("Text");
        messagesSendMessagesPanel.add(messagesSendMessagesMessageLabel);
        messagesSendMessagesMessageLabel.setBounds(40, 150, 70, 23);

        messagesSendMessagesMessageTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesMessageTitle.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesPanel.add(messagesSendMessagesMessageTitle);
        messagesSendMessagesMessageTitle.setBounds(110, 120, 410, 25);

        messagesSendMessagesMessage.setColumns(20);
        messagesSendMessagesMessage.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesMessage.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesMessage.setRows(5);
        messagesSendMessagesMessageScrollPane.setViewportView(messagesSendMessagesMessage);

        messagesSendMessagesPanel.add(messagesSendMessagesMessageScrollPane);
        messagesSendMessagesMessageScrollPane.setBounds(110, 150, 410, 390);

        sendMessagesNavigationButtons.add(messagesSendMessageShowFriendsListRadioButton);
        messagesSendMessageShowFriendsListRadioButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessageShowFriendsListRadioButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessageShowFriendsListRadioButton.setSelected(true);
        messagesSendMessageShowFriendsListRadioButton.setText("Benutzer");
        messagesSendMessageShowFriendsListRadioButton.setOpaque(false);
        messagesSendMessageShowFriendsListRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                messagesSendMessageShowFriendsListRadioButtonItemStateChanged(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessageShowFriendsListRadioButton);
        messagesSendMessageShowFriendsListRadioButton.setBounds(680, 120, 97, 27);

        sendMessagesNavigationButtons.add(messagesSendMessagesShowGroupsradioButton);
        messagesSendMessagesShowGroupsradioButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesShowGroupsradioButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesShowGroupsradioButton.setText("Gruppen");
        messagesSendMessagesShowGroupsradioButton.setOpaque(false);
        messagesSendMessagesShowGroupsradioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                messagesSendMessagesShowGroupsradioButtonItemStateChanged(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessagesShowGroupsradioButton);
        messagesSendMessagesShowGroupsradioButton.setBounds(850, 120, 93, 27);

        messagesSendMessagesAdresseeList.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesAdresseeList.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesAdresseeScrollPane.setViewportView(messagesSendMessagesAdresseeList);

        messagesSendMessagesPanel.add(messagesSendMessagesAdresseeScrollPane);
        messagesSendMessagesAdresseeScrollPane.setBounds(660, 390, 310, 150);

        messagesSendMessagesAddAdresseeButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesAddAdresseeButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesAddAdresseeButton.setText("Hinzufügen");
        messagesSendMessagesAddAdresseeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesSendMessagesAddAdresseeButtonActionPerformed(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessagesAddAdresseeButton);
        messagesSendMessagesAddAdresseeButton.setBounds(660, 325, 160, 27);

        messagesSendMessagesDeleteAdresseeButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesDeleteAdresseeButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesDeleteAdresseeButton.setText("Löschen");
        messagesSendMessagesDeleteAdresseeButton.setEnabled(false);
        messagesSendMessagesDeleteAdresseeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesSendMessagesDeleteAdresseeButtonActionPerformed(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessagesDeleteAdresseeButton);
        messagesSendMessagesDeleteAdresseeButton.setBounds(820, 325, 160, 27);

        messagesSendMessagesSendLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        messagesSendMessagesSendLabel.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesSendLabel.setText("Senden an:");
        messagesSendMessagesPanel.add(messagesSendMessagesSendLabel);
        messagesSendMessagesSendLabel.setBounds(120, 570, 110, 26);

        messagesSendMessagesSendToAllFriendsButton.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        messagesSendMessagesSendToAllFriendsButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesSendToAllFriendsButton.setText("alle Freunde");
        messagesSendMessagesSendToAllFriendsButton.setEnabled(false);
        messagesSendMessagesSendToAllFriendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesSendMessagesSendToAllFriendsButtonActionPerformed(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessagesSendToAllFriendsButton);
        messagesSendMessagesSendToAllFriendsButton.setBounds(270, 570, 330, 27);

        messagesSendMessagesSendToAdresseeListButton.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        messagesSendMessagesSendToAdresseeListButton.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesSendToAdresseeListButton.setText("ausgewähle Empfänger");
        messagesSendMessagesSendToAdresseeListButton.setEnabled(false);
        messagesSendMessagesSendToAdresseeListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesSendMessagesSendToAdresseeListButtonActionPerformed(evt);
            }
        });
        messagesSendMessagesPanel.add(messagesSendMessagesSendToAdresseeListButton);
        messagesSendMessagesSendToAdresseeListButton.setBounds(640, 570, 330, 27);

        messagesSendMessagesTitleCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        messagesSendMessagesTitleCheck.setText("jLabel5");
        messagesSendMessagesPanel.add(messagesSendMessagesTitleCheck);
        messagesSendMessagesTitleCheck.setBounds(530, 120, 24, 24);

        messagesSendMessagesMessageCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        messagesSendMessagesMessageCheck.setText("jLabel6");
        messagesSendMessagesPanel.add(messagesSendMessagesMessageCheck);
        messagesSendMessagesMessageCheck.setBounds(530, 310, 24, 24);

        messagesSendMessagesPotentialAdresseeList.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        messagesSendMessagesPotentialAdresseeList.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesPotentialAdresseeScrollPane.setViewportView(messagesSendMessagesPotentialAdresseeList);

        messagesSendMessagesPanel.add(messagesSendMessagesPotentialAdresseeScrollPane);
        messagesSendMessagesPotentialAdresseeScrollPane.setBounds(660, 150, 310, 170);

        messagesSendMessagesMessageTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 16)); // NOI18N
        messagesSendMessagesMessageTitleLabel.setForeground(new java.awt.Color(0, 153, 153));
        messagesSendMessagesMessageTitleLabel.setText("Thema");
        messagesSendMessagesPanel.add(messagesSendMessagesMessageTitleLabel);
        messagesSendMessagesMessageTitleLabel.setBounds(40, 120, 60, 23);

        messagesPanel.add(messagesSendMessagesPanel);
        messagesSendMessagesPanel.setBounds(0, 0, 1010, 630);

        getContentPane().add(messagesPanel);
        messagesPanel.setBounds(0, 0, 1010, 630);

        postsPanel.setOpaque(false);
        postsPanel.setLayout(null);

        postsButtons.add(writePostsButton);
        writePostsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 15)); // NOI18N
        writePostsButton.setForeground(new java.awt.Color(0, 153, 153));
        writePostsButton.setText("Schreiben");
        writePostsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writePostsButtonActionPerformed(evt);
            }
        });
        postsPanel.add(writePostsButton);
        writePostsButton.setBounds(512, 35, 128, 30);

        postsButtons.add(readPostsButton);
        readPostsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        readPostsButton.setForeground(new java.awt.Color(0, 153, 153));
        readPostsButton.setText("Lesen");
        readPostsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readPostsButtonActionPerformed(evt);
            }
        });
        postsPanel.add(readPostsButton);
        readPostsButton.setBounds(640, 35, 128, 30);

        postsButtons.add(editPostsButton);
        editPostsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        editPostsButton.setForeground(new java.awt.Color(0, 153, 153));
        editPostsButton.setText("Bearbeiten");
        editPostsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPostsButtonActionPerformed(evt);
            }
        });
        postsPanel.add(editPostsButton);
        editPostsButton.setBounds(768, 35, 128, 30);

        writePostsPanel.setOpaque(false);
        writePostsPanel.setLayout(null);

        postsWritePostsTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsTitleLabel.setForeground(new java.awt.Color(0, 153, 153));
        postsWritePostsTitleLabel.setText("Veröffentliche");
        writePostsPanel.add(postsWritePostsTitleLabel);
        postsWritePostsTitleLabel.setBounds(40, 100, 120, 25);

        writePostsNavigationButtons.add(postWritePostsPostPrivateRadioButton);
        postWritePostsPostPrivateRadioButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postWritePostsPostPrivateRadioButton.setForeground(new java.awt.Color(51, 255, 255));
        postWritePostsPostPrivateRadioButton.setSelected(true);
        postWritePostsPostPrivateRadioButton.setText("Privat");
        postWritePostsPostPrivateRadioButton.setOpaque(false);
        writePostsPanel.add(postWritePostsPostPrivateRadioButton);
        postWritePostsPostPrivateRadioButton.setBounds(370, 100, 160, 27);

        writePostsNavigationButtons.add(postWritePostsPostPublicRadioButton);
        postWritePostsPostPublicRadioButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postWritePostsPostPublicRadioButton.setForeground(new java.awt.Color(51, 255, 255));
        postWritePostsPostPublicRadioButton.setText("Öffentlich");
        postWritePostsPostPublicRadioButton.setOpaque(false);
        postWritePostsPostPublicRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postWritePostsPostPublicRadioButtonActionPerformed(evt);
            }
        });
        writePostsPanel.add(postWritePostsPostPublicRadioButton);
        postWritePostsPostPublicRadioButton.setBounds(530, 100, 160, 27);

        postsWritePostsTopicLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsTopicLabel.setForeground(new java.awt.Color(0, 153, 153));
        postsWritePostsTopicLabel.setText("Thema");
        writePostsPanel.add(postsWritePostsTopicLabel);
        postsWritePostsTopicLabel.setBounds(40, 140, 100, 25);

        postsWritePostsTopic.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsTopic.setForeground(new java.awt.Color(0, 153, 153));
        writePostsPanel.add(postsWritePostsTopic);
        postsWritePostsTopic.setBounds(170, 140, 760, 25);

        postsWritePostsTextLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsTextLabel.setForeground(new java.awt.Color(0, 153, 153));
        postsWritePostsTextLabel.setText("Text");
        writePostsPanel.add(postsWritePostsTextLabel);
        postsWritePostsTextLabel.setBounds(40, 180, 100, 25);

        postsWritePostsTextScrollPane.setForeground(new java.awt.Color(0, 153, 153));

        postsWritePostsText.setColumns(20);
        postsWritePostsText.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsText.setRows(5);
        postsWritePostsTextScrollPane.setViewportView(postsWritePostsText);

        writePostsPanel.add(postsWritePostsTextScrollPane);
        postsWritePostsTextScrollPane.setBounds(170, 180, 760, 390);

        postsWritePostsSendPostButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsWritePostsSendPostButton.setForeground(new java.awt.Color(0, 153, 153));
        postsWritePostsSendPostButton.setText("Veröffentlichen");
        postsWritePostsSendPostButton.setEnabled(false);
        postsWritePostsSendPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postsWritePostsSendPostButtonActionPerformed(evt);
            }
        });
        writePostsPanel.add(postsWritePostsSendPostButton);
        postsWritePostsSendPostButton.setBounds(750, 580, 180, 27);

        postWritePostsTopicCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        postWritePostsTopicCheck.setText("jLabel5");
        writePostsPanel.add(postWritePostsTopicCheck);
        postWritePostsTopicCheck.setBounds(940, 140, 24, 24);

        postWritePostsTextCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        postWritePostsTextCheck.setText("jLabel6");
        writePostsPanel.add(postWritePostsTextCheck);
        postWritePostsTextCheck.setBounds(940, 380, 24, 24);

        postsPanel.add(writePostsPanel);
        writePostsPanel.setBounds(0, 0, 1010, 630);

        readPostsPanel.setOpaque(false);
        readPostsPanel.setLayout(null);

        postsReadPostsVoteButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsVoteButton.setForeground(new java.awt.Color(0, 153, 153));
        postsReadPostsVoteButton.setText("Vote / Unvote");
        readPostsPanel.add(postsReadPostsVoteButton);
        postsReadPostsVoteButton.setBounds(30, 580, 380, 27);

        postsReadPostsUsernameLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsUsernameLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsReadPostsUsernameLabel.setText("Username:");
        readPostsPanel.add(postsReadPostsUsernameLabel);
        postsReadPostsUsernameLabel.setBounds(460, 90, 110, 25);

        postsReadPostsUsername.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsUsername.setForeground(new java.awt.Color(0, 153, 153));
        readPostsPanel.add(postsReadPostsUsername);
        postsReadPostsUsername.setBounds(590, 90, 280, 25);

        postsReadPostsSearchUsernameButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsSearchUsernameButton.setForeground(new java.awt.Color(0, 153, 153));
        postsReadPostsSearchUsernameButton.setText("Suche");
        postsReadPostsSearchUsernameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postsReadPostsSearchUsernameButtonActionPerformed(evt);
            }
        });
        readPostsPanel.add(postsReadPostsSearchUsernameButton);
        postsReadPostsSearchUsernameButton.setBounds(880, 90, 100, 23);

        postsReadPostsDateLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsDateLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsReadPostsDateLabel.setText("Datum");
        readPostsPanel.add(postsReadPostsDateLabel);
        postsReadPostsDateLabel.setBounds(460, 130, 110, 25);

        postsReadPostsAutorLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsAutorLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsReadPostsAutorLabel.setText("Autor");
        readPostsPanel.add(postsReadPostsAutorLabel);
        postsReadPostsAutorLabel.setBounds(460, 170, 110, 25);

        postsReadPostsTopicLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsTopicLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsReadPostsTopicLabel.setText("Thema");
        readPostsPanel.add(postsReadPostsTopicLabel);
        postsReadPostsTopicLabel.setBounds(460, 210, 110, 25);

        postsReadPostsTextLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsTextLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsReadPostsTextLabel.setText("Text");
        readPostsPanel.add(postsReadPostsTextLabel);
        postsReadPostsTextLabel.setBounds(460, 250, 110, 25);

        postsReadPostsDate.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsDate.setForeground(new java.awt.Color(51, 255, 255));
        readPostsPanel.add(postsReadPostsDate);
        postsReadPostsDate.setBounds(590, 130, 400, 25);

        postsReadPostsAutor.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsAutor.setForeground(new java.awt.Color(51, 255, 255));
        readPostsPanel.add(postsReadPostsAutor);
        postsReadPostsAutor.setBounds(590, 170, 400, 25);

        postsReadPostsTopic.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsTopic.setForeground(new java.awt.Color(51, 255, 255));
        readPostsPanel.add(postsReadPostsTopic);
        postsReadPostsTopic.setBounds(590, 210, 400, 25);

        postsReadPostsText.setColumns(20);
        postsReadPostsText.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsReadPostsText.setForeground(new java.awt.Color(0, 153, 153));
        postsReadPostsText.setRows(5);
        postsReadPostsTextLabelScrollPane.setViewportView(postsReadPostsText);

        readPostsPanel.add(postsReadPostsTextLabelScrollPane);
        postsReadPostsTextLabelScrollPane.setBounds(590, 250, 400, 360);

        postsReadPostsAllPosts.setAutoCreateRowSorter(true);
        postsReadPostsAllPosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null,null},
                {null, null, null,null},
                {null, null, null,null},
                {null, null, null,null}
            },
            new String [] {
                "Thema", "Autor", "Datum", "Rating"
            }
        ));
        postsReadPostsAllPosts.setDragEnabled(true);
        postsReadPostsAllPosts.setOpaque(false);
        postsReadPostsAllPostsScrollPane.setViewportView(postsReadPostsAllPosts);

        readPostsPanel.add(postsReadPostsAllPostsScrollPane);
        postsReadPostsAllPostsScrollPane.setBounds(20, 90, 400, 480);

        postsPanel.add(readPostsPanel);
        readPostsPanel.setBounds(0, 0, 1010, 630);

        editPostsPanel.setOpaque(false);
        editPostsPanel.setLayout(null);

        postsEditPostsMyPosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Thema", "Datum"
            }
        ));
        postsEditPostsMyPostsScrollPane.setViewportView(postsEditPostsMyPosts);

        editPostsPanel.add(postsEditPostsMyPostsScrollPane);
        postsEditPostsMyPostsScrollPane.setBounds(30, 90, 452, 520);

        postsEditPostsDateLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsDateLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsEditPostsDateLabel.setText("Datum");
        editPostsPanel.add(postsEditPostsDateLabel);
        postsEditPostsDateLabel.setBounds(520, 100, 90, 25);

        postsEditPostsTopicLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsTopicLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsEditPostsTopicLabel.setText("Thema");
        editPostsPanel.add(postsEditPostsTopicLabel);
        postsEditPostsTopicLabel.setBounds(520, 140, 90, 25);

        postsEditPostsTextLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsTextLabel.setForeground(new java.awt.Color(51, 255, 255));
        postsEditPostsTextLabel.setText("Text");
        editPostsPanel.add(postsEditPostsTextLabel);
        postsEditPostsTextLabel.setBounds(520, 180, 90, 25);

        postsEditPostsDate.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsDate.setForeground(new java.awt.Color(51, 255, 255));
        editPostsPanel.add(postsEditPostsDate);
        postsEditPostsDate.setBounds(620, 100, 340, 25);

        postsEditPostsTopic.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        editPostsPanel.add(postsEditPostsTopic);
        postsEditPostsTopic.setBounds(620, 140, 340, 25);

        postsEditPostsText.setColumns(20);
        postsEditPostsText.setRows(5);
        postsEditPostsTextScrollPane.setViewportView(postsEditPostsText);

        editPostsPanel.add(postsEditPostsTextScrollPane);
        postsEditPostsTextScrollPane.setBounds(620, 190, 340, 380);

        postsEditPostsDeletePostButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsDeletePostButton.setForeground(new java.awt.Color(0, 153, 153));
        postsEditPostsDeletePostButton.setText("Löschen");
        postsEditPostsDeletePostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postsEditPostsDeletePostButtonActionPerformed(evt);
            }
        });
        editPostsPanel.add(postsEditPostsDeletePostButton);
        postsEditPostsDeletePostButton.setBounds(640, 580, 130, 27);

        postsEditPostsSendPostButton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        postsEditPostsSendPostButton.setForeground(new java.awt.Color(0, 153, 153));
        postsEditPostsSendPostButton.setText("Veröffentlichen");
        postsEditPostsSendPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postsEditPostsSendPostButtonActionPerformed(evt);
            }
        });
        editPostsPanel.add(postsEditPostsSendPostButton);
        postsEditPostsSendPostButton.setBounds(780, 580, 160, 27);

        postsEditPostsTextCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        postsEditPostsTextCheck.setText("jLabel6");
        editPostsPanel.add(postsEditPostsTextCheck);
        postsEditPostsTextCheck.setBounds(970, 380, 24, 24);

        postsEditPostsTopicCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        postsEditPostsTopicCheck.setText("jLabel6");
        editPostsPanel.add(postsEditPostsTopicCheck);
        postsEditPostsTopicCheck.setBounds(970, 140, 24, 24);

        postsPanel.add(editPostsPanel);
        editPostsPanel.setBounds(0, 0, 1010, 630);

        getContentPane().add(postsPanel);
        postsPanel.setBounds(0, 0, 1010, 630);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Symbol-Pi-HD-Wallpaper-Background-1024x640.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, -10, 1030, 650);

        usersPanel.setOpaque(false);
        usersPanel.setLayout(null);

        userNavigationButtons.add(usersFindFriendsButton);
        usersFindFriendsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsButton.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsButton.setText("Freunde suchen");
        usersFindFriendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersFindFriendsButtonActionPerformed(evt);
            }
        });
        usersPanel.add(usersFindFriendsButton);
        usersFindFriendsButton.setBounds(302, 35, 146, 30);

        userNavigationButtons.add(usersMyFriendsButton);
        usersMyFriendsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersMyFriendsButton.setForeground(new java.awt.Color(0, 153, 153));
        usersMyFriendsButton.setText("Meine Freunde");
        usersMyFriendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersMyFriendsButtonActionPerformed(evt);
            }
        });
        usersPanel.add(usersMyFriendsButton);
        usersMyFriendsButton.setBounds(448, 35, 146, 30);

        usersMyFriendsPanel.setOpaque(false);
        usersMyFriendsPanel.setLayout(null);

        usersMyFriendsList.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        usersMyFriendsList.setForeground(new java.awt.Color(0, 153, 153));
        usersMyFriendsScrollPane.setViewportView(usersMyFriendsList);

        usersMyFriendsPanel.add(usersMyFriendsScrollPane);
        usersMyFriendsScrollPane.setBounds(10, 90, 360, 440);

        usersMyFriendsUsernameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersMyFriendsUsernameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsUsernameLabel.setText("Username");
        usersMyFriendsPanel.add(usersMyFriendsUsernameLabel);
        usersMyFriendsUsernameLabel.setBounds(420, 40, 130, 20);

        usersMyFriendsFirstNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersMyFriendsFirstNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsFirstNameLabel.setText("Vorname");
        usersMyFriendsPanel.add(usersMyFriendsFirstNameLabel);
        usersMyFriendsFirstNameLabel.setBounds(420, 100, 130, 20);

        usersMyFriendsFamilyNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersMyFriendsFamilyNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsFamilyNameLabel.setText("Nachname");
        usersMyFriendsPanel.add(usersMyFriendsFamilyNameLabel);
        usersMyFriendsFamilyNameLabel.setBounds(420, 160, 130, 20);

        usersMyFriendsDescriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersMyFriendsDescriptionLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsDescriptionLabel.setText("Beschreibung");
        usersMyFriendsPanel.add(usersMyFriendsDescriptionLabel);
        usersMyFriendsDescriptionLabel.setBounds(420, 220, 130, 20);

        usersMyFriendsUsername.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersMyFriendsUsername.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsPanel.add(usersMyFriendsUsername);
        usersMyFriendsUsername.setBounds(580, 35, 130, 30);

        usersMyFriendsFirstName.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersMyFriendsFirstName.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsPanel.add(usersMyFriendsFirstName);
        usersMyFriendsFirstName.setBounds(580, 95, 130, 30);

        usersMyFriendsFamilyName.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersMyFriendsFamilyName.setForeground(new java.awt.Color(102, 255, 255));
        usersMyFriendsPanel.add(usersMyFriendsFamilyName);
        usersMyFriendsFamilyName.setBounds(580, 155, 130, 30);

        usersMyFriendsDescription.setEditable(false);
        usersMyFriendsDescription.setColumns(20);
        usersMyFriendsDescription.setFont(new java.awt.Font("Segoe UI Black", 0, 13)); // NOI18N
        usersMyFriendsDescription.setForeground(new java.awt.Color(0, 153, 153));
        usersMyFriendsDescription.setLineWrap(true);
        usersMyFriendsDescription.setRows(5);
        usersMyFriendsDescription.setWrapStyleWord(true);
        usersMyFriendsDescription.setOpaque(false);
        usersMyFriendsDescriptionScrollPane.setViewportView(usersMyFriendsDescription);

        usersMyFriendsPanel.add(usersMyFriendsDescriptionScrollPane);
        usersMyFriendsDescriptionScrollPane.setBounds(580, 220, 390, 230);

        usersMyFriendsUnfriendButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersMyFriendsUnfriendButton.setForeground(new java.awt.Color(0, 153, 153));
        usersMyFriendsUnfriendButton.setText("Freundschaft löschen");
        usersMyFriendsUnfriendButton.setActionCommand("");
        usersMyFriendsUnfriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersMyFriendsUnfriendButtonActionPerformed(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsUnfriendButton);
        usersMyFriendsUnfriendButton.setBounds(780, 500, 190, 27);

        myFriendsFriendshipTypesButtons.add(usersMyFriendsDoubledFriendshipsRadioButton);
        usersMyFriendsDoubledFriendshipsRadioButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        usersMyFriendsDoubledFriendshipsRadioButton.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsDoubledFriendshipsRadioButton.setText("Ich <--> User");
        usersMyFriendsDoubledFriendshipsRadioButton.setOpaque(false);
        usersMyFriendsDoubledFriendshipsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersMyFriendsDoubledFriendshipsRadioButtonItemStateChanged(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsDoubledFriendshipsRadioButton);
        usersMyFriendsDoubledFriendshipsRadioButton.setBounds(10, 20, 110, 25);

        myFriendsFriendshipTypesButtons.add(usersMyFriendsMeUserFriendshipsRadioButton);
        usersMyFriendsMeUserFriendshipsRadioButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        usersMyFriendsMeUserFriendshipsRadioButton.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsMeUserFriendshipsRadioButton.setText(" Ich --> User ");
        usersMyFriendsMeUserFriendshipsRadioButton.setOpaque(false);
        usersMyFriendsMeUserFriendshipsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersMyFriendsMeUserFriendshipsRadioButtonItemStateChanged(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsMeUserFriendshipsRadioButton);
        usersMyFriendsMeUserFriendshipsRadioButton.setBounds(130, 20, 110, 25);

        myFriendsFriendshipTypesButtons.add(usersMyFriendsUserMeFriendshipsRadioButton);
        usersMyFriendsUserMeFriendshipsRadioButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        usersMyFriendsUserMeFriendshipsRadioButton.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsUserMeFriendshipsRadioButton.setText(" Ich <-- User ");
        usersMyFriendsUserMeFriendshipsRadioButton.setOpaque(false);
        usersMyFriendsUserMeFriendshipsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersMyFriendsUserMeFriendshipsRadioButtonItemStateChanged(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsUserMeFriendshipsRadioButton);
        usersMyFriendsUserMeFriendshipsRadioButton.setBounds(240, 20, 110, 25);

        usersMyFriendsSortLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersMyFriendsSortLabel.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsSortLabel.setText("Sortieren");
        usersMyFriendsPanel.add(usersMyFriendsSortLabel);
        usersMyFriendsSortLabel.setBounds(20, 60, 80, 20);

        myFriendsOrderButtons.add(usersMyFriendsAscendingOrderRadioButton);
        usersMyFriendsAscendingOrderRadioButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersMyFriendsAscendingOrderRadioButton.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsAscendingOrderRadioButton.setSelected(true);
        usersMyFriendsAscendingOrderRadioButton.setText("Aufsteigend");
        usersMyFriendsAscendingOrderRadioButton.setOpaque(false);
        usersMyFriendsAscendingOrderRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersMyFriendsAscendingOrderRadioButtonItemStateChanged(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsAscendingOrderRadioButton);
        usersMyFriendsAscendingOrderRadioButton.setBounds(140, 60, 120, 20);

        myFriendsOrderButtons.add(usersMyFriendsDescendingOrderRadioButton);
        usersMyFriendsDescendingOrderRadioButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersMyFriendsDescendingOrderRadioButton.setForeground(new java.awt.Color(0, 255, 255));
        usersMyFriendsDescendingOrderRadioButton.setText("Absteigend");
        usersMyFriendsDescendingOrderRadioButton.setOpaque(false);
        usersMyFriendsDescendingOrderRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersMyFriendsDescendingOrderRadioButtonItemStateChanged(evt);
            }
        });
        usersMyFriendsPanel.add(usersMyFriendsDescendingOrderRadioButton);
        usersMyFriendsDescendingOrderRadioButton.setBounds(260, 60, 110, 20);

        usersPanel.add(usersMyFriendsPanel);
        usersMyFriendsPanel.setBounds(10, 80, 1000, 540);

        usersFindFriendsPanel.setOpaque(false);
        usersFindFriendsPanel.setLayout(null);

        usersFindFriendsAllUsers.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        usersFindFriendsAllUsers.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsAllUsers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        usersFindFriendsAllUsersScrollPane.setViewportView(usersFindFriendsAllUsers);

        usersFindFriendsPanel.add(usersFindFriendsAllUsersScrollPane);
        usersFindFriendsAllUsersScrollPane.setBounds(10, 50, 360, 480);

        usersFindFriendsSearchLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersFindFriendsSearchLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsSearchLabel.setText("Suche nach:");
        usersFindFriendsPanel.add(usersFindFriendsSearchLabel);
        usersFindFriendsSearchLabel.setBounds(420, 30, 130, 20);

        usersFindFriendsFamilyNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersFindFriendsFamilyNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsFamilyNameLabel.setText("Nachname");
        usersFindFriendsPanel.add(usersFindFriendsFamilyNameLabel);
        usersFindFriendsFamilyNameLabel.setBounds(420, 210, 130, 20);

        usersFindFriendsDescriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersFindFriendsDescriptionLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsDescriptionLabel.setText("Beschreibung");
        usersFindFriendsPanel.add(usersFindFriendsDescriptionLabel);
        usersFindFriendsDescriptionLabel.setBounds(420, 260, 130, 20);

        usersFindFriendsUsername.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersFindFriendsUsername.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsPanel.add(usersFindFriendsUsername);
        usersFindFriendsUsername.setBounds(580, 110, 390, 30);

        usersFindFriendsFirstName.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersFindFriendsFirstName.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsPanel.add(usersFindFriendsFirstName);
        usersFindFriendsFirstName.setBounds(580, 160, 390, 30);

        usersFindFriendsFamilyName.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        usersFindFriendsFamilyName.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsPanel.add(usersFindFriendsFamilyName);
        usersFindFriendsFamilyName.setBounds(580, 210, 390, 30);

        usersFindFriendsDescription.setEditable(false);
        usersFindFriendsDescription.setColumns(20);
        usersFindFriendsDescription.setFont(new java.awt.Font("Segoe UI Black", 0, 13)); // NOI18N
        usersFindFriendsDescription.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsDescription.setLineWrap(true);
        usersFindFriendsDescription.setRows(5);
        usersFindFriendsDescription.setWrapStyleWord(true);
        usersFindFriendsDescription.setOpaque(false);
        usersFindFriendsDescriptionScrollPane.setViewportView(usersFindFriendsDescription);

        usersFindFriendsPanel.add(usersFindFriendsDescriptionScrollPane);
        usersFindFriendsDescriptionScrollPane.setBounds(580, 260, 390, 230);

        usersFindFriendsBefriendButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsBefriendButton.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsBefriendButton.setText("Als Freund eintragen");
        usersFindFriendsBefriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersFindFriendsBefriendButtonActionPerformed(evt);
            }
        });
        usersFindFriendsPanel.add(usersFindFriendsBefriendButton);
        usersFindFriendsBefriendButton.setBounds(780, 500, 190, 27);

        usersFindFriendsUsernameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersFindFriendsUsernameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsUsernameLabel.setText("Username");
        usersFindFriendsPanel.add(usersFindFriendsUsernameLabel);
        usersFindFriendsUsernameLabel.setBounds(420, 110, 130, 20);

        usersFindFriendsFirstNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        usersFindFriendsFirstNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        usersFindFriendsFirstNameLabel.setText("Vorname");
        usersFindFriendsPanel.add(usersFindFriendsFirstNameLabel);
        usersFindFriendsFirstNameLabel.setBounds(420, 160, 130, 20);

        usersFindFriendsSearchTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                usersFindFriendsSearchTextFieldCaretUpdate(evt);
            }
        });
        usersFindFriendsPanel.add(usersFindFriendsSearchTextField);
        usersFindFriendsSearchTextField.setBounds(580, 25, 390, 30);

        usersFindFriendsSearchUsernameButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsSearchUsernameButton.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsSearchUsernameButton.setText("username");
        usersFindFriendsSearchUsernameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersFindFriendsSearchUsernameButtonActionPerformed(evt);
            }
        });
        usersFindFriendsPanel.add(usersFindFriendsSearchUsernameButton);
        usersFindFriendsSearchUsernameButton.setBounds(620, 70, 150, 30);

        usersFindFriendsSearchEMailButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsSearchEMailButton.setForeground(new java.awt.Color(0, 153, 153));
        usersFindFriendsSearchEMailButton.setText("E-Mail");
        usersFindFriendsSearchEMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersFindFriendsSearchEMailButtonActionPerformed(evt);
            }
        });
        usersFindFriendsPanel.add(usersFindFriendsSearchEMailButton);
        usersFindFriendsSearchEMailButton.setBounds(790, 70, 150, 30);

        findFriendsOrderButtons.add(userFindFriendsAscendingOrder);
        userFindFriendsAscendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        userFindFriendsAscendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        userFindFriendsAscendingOrder.setText("Aufsteigend");
        userFindFriendsAscendingOrder.setOpaque(false);
        userFindFriendsAscendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userFindFriendsAscendingOrderItemStateChanged(evt);
            }
        });
        usersFindFriendsPanel.add(userFindFriendsAscendingOrder);
        userFindFriendsAscendingOrder.setBounds(140, 20, 120, 20);

        findFriendsOrderButtons.add(usersFindFriendsDescendingOrder);
        usersFindFriendsDescendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsDescendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        usersFindFriendsDescendingOrder.setText("Absteigend");
        usersFindFriendsDescendingOrder.setOpaque(false);
        usersFindFriendsDescendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usersFindFriendsDescendingOrderItemStateChanged(evt);
            }
        });
        usersFindFriendsPanel.add(usersFindFriendsDescendingOrder);
        usersFindFriendsDescendingOrder.setBounds(260, 20, 110, 20);

        usersFindFriendsSortLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersFindFriendsSortLabel.setForeground(new java.awt.Color(0, 255, 255));
        usersFindFriendsSortLabel.setText("Sortieren");
        usersFindFriendsPanel.add(usersFindFriendsSortLabel);
        usersFindFriendsSortLabel.setBounds(20, 20, 80, 20);

        usersPanel.add(usersFindFriendsPanel);
        usersFindFriendsPanel.setBounds(10, 80, 1000, 540);

        getContentPane().add(usersPanel);
        usersPanel.setBounds(0, 0, 1010, 630);

        myProfilePanel.setOpaque(false);
        myProfilePanel.setLayout(null);

        myProfileProfileDataPanel.setOpaque(false);
        myProfileProfileDataPanel.setLayout(null);

        myProfileOptionButtonsPanel.setOpaque(false);
        myProfileOptionButtonsPanel.setLayout(null);

        myProfileChangeData.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileChangeData.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangeData.setText("Daten ändern");
        myProfileChangeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileChangeDataActionPerformed(evt);
            }
        });
        myProfileOptionButtonsPanel.add(myProfileChangeData);
        myProfileChangeData.setBounds(20, 10, 130, 27);

        myProfileChangePassword.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileChangePassword.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePassword.setText("Passwort ändern");
        myProfileChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileChangePasswordActionPerformed(evt);
            }
        });
        myProfileOptionButtonsPanel.add(myProfileChangePassword);
        myProfileChangePassword.setBounds(190, 10, 160, 27);

        myProfileDeleteAccount.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileDeleteAccount.setForeground(new java.awt.Color(0, 204, 204));
        myProfileDeleteAccount.setText("Konto löschen");
        myProfileDeleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileDeleteAccountActionPerformed(evt);
            }
        });
        myProfileOptionButtonsPanel.add(myProfileDeleteAccount);
        myProfileDeleteAccount.setBounds(380, 10, 140, 27);

        myProfileProfileDataPanel.add(myProfileOptionButtonsPanel);
        myProfileOptionButtonsPanel.setBounds(50, 360, 560, 50);

        myProfileFirstName.setEditable(false);
        myProfileProfileDataPanel.add(myProfileFirstName);
        myProfileFirstName.setBounds(230, 90, 290, 25);

        myProfileFamilyName.setEditable(false);
        myProfileProfileDataPanel.add(myProfileFamilyName);
        myProfileFamilyName.setBounds(230, 125, 290, 25);

        myProfileFirstNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileFirstNameLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileFirstNameLabel.setText("Vorname");
        myProfileProfileDataPanel.add(myProfileFirstNameLabel);
        myProfileFirstNameLabel.setBounds(60, 90, 90, 20);

        myProfileEMailLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileEMailLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileEMailLabel.setText("E-Mail");
        myProfileProfileDataPanel.add(myProfileEMailLabel);
        myProfileEMailLabel.setBounds(60, 160, 90, 20);

        myProfileBirthmonth.setEditable(false);
        myProfileBirthmonth.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        myProfileBirthmonth.setText("mm");
        myProfileBirthmonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileBirthmonthActionPerformed(evt);
            }
        });
        myProfileProfileDataPanel.add(myProfileBirthmonth);
        myProfileBirthmonth.setBounds(290, 195, 50, 25);

        myProfileTitelLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        myProfileTitelLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileTitelLabel.setText("Meine Daten");
        myProfileProfileDataPanel.add(myProfileTitelLabel);
        myProfileTitelLabel.setBounds(270, 30, 290, 50);

        myProfileBirthday.setEditable(false);
        myProfileBirthday.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        myProfileBirthday.setText("tt");
        myProfileBirthday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileBirthdayActionPerformed(evt);
            }
        });
        myProfileProfileDataPanel.add(myProfileBirthday);
        myProfileBirthday.setBounds(230, 195, 50, 25);

        myProfileBirthyear.setEditable(false);
        myProfileBirthyear.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        myProfileBirthyear.setText("jjjj");
        myProfileProfileDataPanel.add(myProfileBirthyear);
        myProfileBirthyear.setBounds(350, 195, 50, 25);

        myProfileFailyNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileFailyNameLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileFailyNameLabel.setText("Nachname");
        myProfileProfileDataPanel.add(myProfileFailyNameLabel);
        myProfileFailyNameLabel.setBounds(60, 125, 100, 20);

        myProfileBirthdateLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileBirthdateLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileBirthdateLabel.setText("Geburtsdatum");
        myProfileProfileDataPanel.add(myProfileBirthdateLabel);
        myProfileBirthdateLabel.setBounds(60, 195, 140, 20);

        myProfileDescriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileDescriptionLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileDescriptionLabel.setText("Beschreibung");
        myProfileProfileDataPanel.add(myProfileDescriptionLabel);
        myProfileDescriptionLabel.setBounds(60, 230, 140, 20);

        myProfileDescriptionScrollPane.setToolTipText("");

        myProfileDescription.setEditable(false);
        myProfileDescription.setColumns(20);
        myProfileDescription.setRows(3);
        myProfileDescription.setTabSize(3);
        myProfileDescriptionScrollPane.setViewportView(myProfileDescription);

        myProfileProfileDataPanel.add(myProfileDescriptionScrollPane);
        myProfileDescriptionScrollPane.setBounds(230, 230, 290, 70);

        myProfileEMail.setEditable(false);
        myProfileProfileDataPanel.add(myProfileEMail);
        myProfileEMail.setBounds(230, 160, 290, 25);

        myProfileChangeDataPanel.setOpaque(false);
        myProfileChangeDataPanel.setLayout(null);

        myProfileFirstNameCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"))); // NOI18N
        myProfileFirstNameCheck.setText("jLabel2");
        myProfileChangeDataPanel.add(myProfileFirstNameCheck);
        myProfileFirstNameCheck.setBounds(530, 90, 24, 24);

        myProfileFamilyNameCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"))); // NOI18N
        myProfileFamilyNameCheck.setText("jLabel2");
        myProfileChangeDataPanel.add(myProfileFamilyNameCheck);
        myProfileFamilyNameCheck.setBounds(530, 125, 24, 24);

        myProfileEMailCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"))); // NOI18N
        myProfileEMailCheck.setText("jLabel2");
        myProfileChangeDataPanel.add(myProfileEMailCheck);
        myProfileEMailCheck.setBounds(530, 160, 24, 24);

        myProfileBirthdayCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"))); // NOI18N
        myProfileBirthdayCheck.setText("jLabel2");
        myProfileChangeDataPanel.add(myProfileBirthdayCheck);
        myProfileBirthdayCheck.setBounds(410, 195, 24, 24);

        myProfileDescriptionCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/001_06.png"))); // NOI18N
        myProfileDescriptionCheck.setText("jLabel2");
        myProfileChangeDataPanel.add(myProfileDescriptionCheck);
        myProfileDescriptionCheck.setBounds(530, 250, 24, 24);

        myProfileSubmitButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileSubmitButton.setForeground(new java.awt.Color(0, 204, 204));
        myProfileSubmitButton.setText("Bestätigen");
        myProfileSubmitButton.setEnabled(false);
        myProfileSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileSubmitButtonActionPerformed(evt);
            }
        });
        myProfileChangeDataPanel.add(myProfileSubmitButton);
        myProfileSubmitButton.setBounds(70, 330, 130, 27);

        myProfileBackButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileBackButton.setForeground(new java.awt.Color(0, 204, 204));
        myProfileBackButton.setText("Zurück");
        myProfileBackButton.setActionCommand("Bestätigen");
        myProfileBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileBackButtonActionPerformed(evt);
            }
        });
        myProfileChangeDataPanel.add(myProfileBackButton);
        myProfileBackButton.setBounds(220, 330, 130, 27);

        myProfileProfileDataPanel.add(myProfileChangeDataPanel);
        myProfileChangeDataPanel.setBounds(0, 0, 1020, 640);

        myProfilePanel.add(myProfileProfileDataPanel);
        myProfileProfileDataPanel.setBounds(0, 0, 1010, 630);

        myProfileChangePasswordPanel.setOpaque(false);
        myProfileChangePasswordPanel.setLayout(null);

        myProfileChangePasswordNewPasswordLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileChangePasswordNewPasswordLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePasswordNewPasswordLabel.setText("Neues Passwort");
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPasswordLabel);
        myProfileChangePasswordNewPasswordLabel.setBounds(60, 190, 160, 20);

        changePasswordTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        changePasswordTitleLabel.setForeground(new java.awt.Color(0, 204, 204));
        changePasswordTitleLabel.setText("Passwort ändern");
        myProfileChangePasswordPanel.add(changePasswordTitleLabel);
        changePasswordTitleLabel.setBounds(270, 90, 290, 50);

        myProfileChangePasswordNewPasswordRepeatLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileChangePasswordNewPasswordRepeatLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePasswordNewPasswordRepeatLabel.setText("Neues Passwort wdh.");
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPasswordRepeatLabel);
        myProfileChangePasswordNewPasswordRepeatLabel.setBounds(60, 220, 200, 20);

        myProfileChangePasswordOldPasswordLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myProfileChangePasswordOldPasswordLabel.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePasswordOldPasswordLabel.setText("Altes Passwort");
        myProfileChangePasswordPanel.add(myProfileChangePasswordOldPasswordLabel);
        myProfileChangePasswordOldPasswordLabel.setBounds(60, 150, 150, 20);

        myProfileChangePasswordNewPasswordCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        myProfileChangePasswordNewPasswordCheck.setText("jLabel2");
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPasswordCheck);
        myProfileChangePasswordNewPasswordCheck.setBounds(620, 180, 24, 24);

        myProfileChangePasswordNewPasswordRepeatCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        myProfileChangePasswordNewPasswordRepeatCheck.setText("jLabel2");
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPasswordRepeatCheck);
        myProfileChangePasswordNewPasswordRepeatCheck.setBounds(620, 220, 24, 24);

        myProfileChangePasswordSubmit.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileChangePasswordSubmit.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePasswordSubmit.setText("Bestätigen");
        myProfileChangePasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileChangePasswordSubmitActionPerformed(evt);
            }
        });
        myProfileChangePasswordPanel.add(myProfileChangePasswordSubmit);
        myProfileChangePasswordSubmit.setBounds(50, 420, 130, 27);

        myProfileChangePasswordBack.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myProfileChangePasswordBack.setForeground(new java.awt.Color(0, 204, 204));
        myProfileChangePasswordBack.setText("Zurück");
        myProfileChangePasswordBack.setActionCommand("Bestätigen");
        myProfileChangePasswordBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myProfileChangePasswordBackActionPerformed(evt);
            }
        });
        myProfileChangePasswordPanel.add(myProfileChangePasswordBack);
        myProfileChangePasswordBack.setBounds(200, 420, 130, 27);
        myProfileChangePasswordPanel.add(myProfileChangePasswordOldPassword);
        myProfileChangePasswordOldPassword.setBounds(270, 150, 340, 20);
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPassword);
        myProfileChangePasswordNewPassword.setBounds(270, 190, 340, 20);
        myProfileChangePasswordPanel.add(myProfileChangePasswordNewPasswordRepeat);
        myProfileChangePasswordNewPasswordRepeat.setBounds(270, 220, 340, 20);

        myProfilePanel.add(myProfileChangePasswordPanel);
        myProfileChangePasswordPanel.setBounds(0, 0, 1010, 630);

        getContentPane().add(myProfilePanel);
        myProfilePanel.setBounds(0, 0, 1010, 630);

        groupsPanel.setOpaque(false);
        groupsPanel.setLayout(null);

        groupButtons.add(myGroupsButton);
        myGroupsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsButton.setForeground(new java.awt.Color(0, 153, 153));
        myGroupsButton.setText("Meine Gruppen");
        myGroupsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myGroupsButtonActionPerformed(evt);
            }
        });
        groupsPanel.add(myGroupsButton);
        myGroupsButton.setBounds(248, 35, 144, 30);

        groupButtons.add(allGroupsButton);
        allGroupsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsButton.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsButton.setText("Alle Gruppen");
        allGroupsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGroupsButtonActionPerformed(evt);
            }
        });
        groupsPanel.add(allGroupsButton);
        allGroupsButton.setBounds(120, 35, 128, 30);

        groupButtons.add(newGroupsButton);
        newGroupsButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        newGroupsButton.setForeground(new java.awt.Color(0, 153, 153));
        newGroupsButton.setText("Neue Gruppe");
        newGroupsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGroupsButtonActionPerformed(evt);
            }
        });
        groupsPanel.add(newGroupsButton);
        newGroupsButton.setBounds(392, 35, 128, 30);

        myGroupsPanel.setOpaque(false);
        myGroupsPanel.setLayout(null);

        myGroupsTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        myGroupsTitleLabel.setForeground(new java.awt.Color(51, 255, 255));
        myGroupsTitleLabel.setText("Meine Gruppen");
        myGroupsPanel.add(myGroupsTitleLabel);
        myGroupsTitleLabel.setBounds(40, 20, 190, 25);

        allGroupsList.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        allGroupsList.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsList.setToolTipText("");
        allGroupsListScrollPane.setViewportView(allGroupsList);

        myGroupsPanel.add(allGroupsListScrollPane);
        allGroupsListScrollPane.setBounds(10, 90, 360, 420);

        myGroupsGroupName.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myGroupsGroupName.setForeground(new java.awt.Color(102, 255, 255));
        myGroupsGroupName.setText("Gruppenname");
        myGroupsPanel.add(myGroupsGroupName);
        myGroupsGroupName.setBounds(630, 60, 340, 20);

        myGroupsMemberLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myGroupsMemberLabel.setForeground(new java.awt.Color(102, 255, 255));
        myGroupsMemberLabel.setText("Member");
        myGroupsPanel.add(myGroupsMemberLabel);
        myGroupsMemberLabel.setBounds(420, 100, 200, 20);

        myGroupsDescription.setEditable(false);
        myGroupsDescription.setColumns(20);
        myGroupsDescription.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsDescription.setForeground(new java.awt.Color(0, 153, 153));
        myGroupsDescription.setLineWrap(true);
        myGroupsDescription.setRows(5);
        myGroupsDescription.setWrapStyleWord(true);
        myGroupsDescription.setOpaque(false);
        myGroupsDescriptionScrollPane.setViewportView(myGroupsDescription);

        myGroupsPanel.add(myGroupsDescriptionScrollPane);
        myGroupsDescriptionScrollPane.setBounds(630, 310, 340, 170);

        myGroupsLeaveGroup.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsLeaveGroup.setForeground(new java.awt.Color(0, 153, 153));
        myGroupsLeaveGroup.setText("Gruppe verlassen");
        myGroupsLeaveGroup.setActionCommand("");
        myGroupsLeaveGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myGroupsLeaveGroupActionPerformed(evt);
            }
        });
        myGroupsPanel.add(myGroupsLeaveGroup);
        myGroupsLeaveGroup.setBounds(810, 500, 160, 27);

        myGroupsGroupNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myGroupsGroupNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        myGroupsGroupNameLabel.setText("Gruppenname");
        myGroupsPanel.add(myGroupsGroupNameLabel);
        myGroupsGroupNameLabel.setBounds(420, 60, 130, 20);

        myGroupsGroupDescriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        myGroupsGroupDescriptionLabel.setForeground(new java.awt.Color(102, 255, 255));
        myGroupsGroupDescriptionLabel.setText("Gruppenbeschreibung");
        myGroupsPanel.add(myGroupsGroupDescriptionLabel);
        myGroupsGroupDescriptionLabel.setBounds(420, 310, 200, 20);

        myGroupsMembersList.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsMembersList.setForeground(new java.awt.Color(0, 153, 153));
        myGroupsMembersListScrollPane.setViewportView(myGroupsMembersList);

        myGroupsPanel.add(myGroupsMembersListScrollPane);
        myGroupsMembersListScrollPane.setBounds(630, 100, 340, 190);

        myGroupsSortLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsSortLabel.setForeground(new java.awt.Color(0, 255, 255));
        myGroupsSortLabel.setText("Sortieren");
        myGroupsPanel.add(myGroupsSortLabel);
        myGroupsSortLabel.setBounds(20, 60, 80, 20);

        myGroupsOrderButtons.add(myGroupsAscendingOrder);
        myGroupsAscendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsAscendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        myGroupsAscendingOrder.setText("Aufsteigend");
        myGroupsAscendingOrder.setOpaque(false);
        myGroupsAscendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                myGroupsAscendingOrderItemStateChanged(evt);
            }
        });
        myGroupsPanel.add(myGroupsAscendingOrder);
        myGroupsAscendingOrder.setBounds(140, 60, 120, 20);

        myGroupsOrderButtons.add(myGroupsDescendingOrder);
        myGroupsDescendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        myGroupsDescendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        myGroupsDescendingOrder.setText("Absteigend");
        myGroupsDescendingOrder.setOpaque(false);
        myGroupsDescendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                myGroupsDescendingOrderItemStateChanged(evt);
            }
        });
        myGroupsPanel.add(myGroupsDescendingOrder);
        myGroupsDescendingOrder.setBounds(260, 60, 110, 20);

        groupsPanel.add(myGroupsPanel);
        myGroupsPanel.setBounds(10, 90, 1010, 540);

        newGroupPanel.setOpaque(false);
        newGroupPanel.setLayout(null);

        newGroupTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        newGroupTitleLabel.setForeground(new java.awt.Color(51, 255, 255));
        newGroupTitleLabel.setText("Neue Gruppe erstellen");
        newGroupPanel.add(newGroupTitleLabel);
        newGroupTitleLabel.setBounds(40, 20, 270, 25);

        newGroupGroupNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        newGroupGroupNameLabel.setForeground(new java.awt.Color(51, 255, 255));
        newGroupGroupNameLabel.setText("Gruppenname");
        newGroupPanel.add(newGroupGroupNameLabel);
        newGroupGroupNameLabel.setBounds(40, 80, 200, 25);

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 255, 255));
        jLabel4.setText("Gruppenbeschreibung");
        newGroupPanel.add(jLabel4);
        jLabel4.setBounds(40, 120, 200, 25);
        newGroupPanel.add(newGroupGroupName);
        newGroupGroupName.setBounds(260, 80, 680, 25);

        newGroupGroupDescription.setColumns(20);
        newGroupGroupDescription.setRows(5);
        newGroupGroupDescriptionScrollPane.setViewportView(newGroupGroupDescription);

        newGroupPanel.add(newGroupGroupDescriptionScrollPane);
        newGroupGroupDescriptionScrollPane.setBounds(260, 120, 680, 370);

        newGroupGroupNameCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        newGroupGroupNameCheck.setText("jLabel5");
        newGroupPanel.add(newGroupGroupNameCheck);
        newGroupGroupNameCheck.setBounds(950, 80, 24, 24);

        newGroupGroupDescritionCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/badge_circle_cross_24_ns.png"))); // NOI18N
        newGroupGroupDescritionCheck.setText("jLabel6");
        newGroupPanel.add(newGroupGroupDescritionCheck);
        newGroupGroupDescritionCheck.setBounds(950, 310, 24, 24);

        newGroupCreateGroup.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        newGroupCreateGroup.setForeground(new java.awt.Color(0, 204, 204));
        newGroupCreateGroup.setEnabled(false);
        newGroupCreateGroup.setLabel("Gruppe erstellen");
        newGroupCreateGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGroupCreateGroupActionPerformed(evt);
            }
        });
        newGroupPanel.add(newGroupCreateGroup);
        newGroupCreateGroup.setBounds(790, 500, 150, 27);

        groupsPanel.add(newGroupPanel);
        newGroupPanel.setBounds(10, 90, 1010, 540);

        allGroupsPanel.setOpaque(false);
        allGroupsPanel.setLayout(null);

        allGroupsTitleLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        allGroupsTitleLabel.setForeground(new java.awt.Color(51, 255, 255));
        allGroupsTitleLabel.setText("Alle Gruppen");
        allGroupsPanel.add(allGroupsTitleLabel);
        allGroupsTitleLabel.setBounds(40, 20, 160, 25);

        allGroupsGroupLists.setFont(new java.awt.Font("Segoe UI Black", 0, 16)); // NOI18N
        allGroupsGroupLists.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsGroupLists.setToolTipText("");
        allGroupsGroupListScrollPane.setViewportView(allGroupsGroupLists);

        allGroupsPanel.add(allGroupsGroupListScrollPane);
        allGroupsGroupListScrollPane.setBounds(10, 90, 360, 420);

        allGroupsGroupName.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        allGroupsGroupName.setForeground(new java.awt.Color(102, 255, 255));
        allGroupsPanel.add(allGroupsGroupName);
        allGroupsGroupName.setBounds(630, 125, 340, 20);

        allGroupsGroupDescriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        allGroupsGroupDescriptionLabel.setForeground(new java.awt.Color(102, 255, 255));
        allGroupsGroupDescriptionLabel.setText("Gruppenbeschreibung");
        allGroupsPanel.add(allGroupsGroupDescriptionLabel);
        allGroupsGroupDescriptionLabel.setBounds(420, 180, 200, 20);

        allGroupsGroupDescription.setEditable(false);
        allGroupsGroupDescription.setColumns(20);
        allGroupsGroupDescription.setFont(new java.awt.Font("Segoe UI Black", 0, 13)); // NOI18N
        allGroupsGroupDescription.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsGroupDescription.setLineWrap(true);
        allGroupsGroupDescription.setRows(5);
        allGroupsGroupDescription.setWrapStyleWord(true);
        allGroupsGroupDescription.setOpaque(false);
        allGroupsGroupDescriptionScrollPane.setViewportView(allGroupsGroupDescription);

        allGroupsPanel.add(allGroupsGroupDescriptionScrollPane);
        allGroupsGroupDescriptionScrollPane.setBounds(630, 180, 340, 300);

        allGroupsJoinGroup.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsJoinGroup.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsJoinGroup.setText("Gruppe betreten");
        allGroupsJoinGroup.setActionCommand("");
        allGroupsJoinGroup.setEnabled(false);
        allGroupsJoinGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGroupsJoinGroupActionPerformed(evt);
            }
        });
        allGroupsPanel.add(allGroupsJoinGroup);
        allGroupsJoinGroup.setBounds(810, 500, 160, 27);

        allGroupsGroupSearchLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        allGroupsGroupSearchLabel.setForeground(new java.awt.Color(102, 255, 255));
        allGroupsGroupSearchLabel.setText("Gruppe");
        allGroupsPanel.add(allGroupsGroupSearchLabel);
        allGroupsGroupSearchLabel.setBounds(420, 70, 130, 20);

        allGroupsGroupNameLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        allGroupsGroupNameLabel.setForeground(new java.awt.Color(102, 255, 255));
        allGroupsGroupNameLabel.setText("Gruppenname");
        allGroupsPanel.add(allGroupsGroupNameLabel);
        allGroupsGroupNameLabel.setBounds(420, 125, 130, 20);

        allGroupsGroupToSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                allGroupsGroupToSearchCaretUpdate(evt);
            }
        });
        allGroupsGroupToSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGroupsGroupToSearchActionPerformed(evt);
            }
        });
        allGroupsPanel.add(allGroupsGroupToSearch);
        allGroupsGroupToSearch.setBounds(630, 70, 240, 25);

        allGroupsSearchButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsSearchButton.setForeground(new java.awt.Color(0, 153, 153));
        allGroupsSearchButton.setLabel("suchen");
        allGroupsSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allGroupsSearchButtonActionPerformed(evt);
            }
        });
        allGroupsPanel.add(allGroupsSearchButton);
        allGroupsSearchButton.setBounds(883, 70, 90, 27);

        allGroupsSortLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsSortLabel.setForeground(new java.awt.Color(0, 255, 255));
        allGroupsSortLabel.setText("Sortieren");
        allGroupsPanel.add(allGroupsSortLabel);
        allGroupsSortLabel.setBounds(20, 60, 80, 20);

        allGroupsOrderButtons.add(allGroupsAscendingOrder);
        allGroupsAscendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsAscendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        allGroupsAscendingOrder.setSelected(true);
        allGroupsAscendingOrder.setText("Aufsteigend");
        allGroupsAscendingOrder.setOpaque(false);
        allGroupsAscendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allGroupsAscendingOrderItemStateChanged(evt);
            }
        });
        allGroupsPanel.add(allGroupsAscendingOrder);
        allGroupsAscendingOrder.setBounds(140, 60, 120, 20);

        allGroupsOrderButtons.add(allGroupsDescendingOrder);
        allGroupsDescendingOrder.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        allGroupsDescendingOrder.setForeground(new java.awt.Color(0, 255, 255));
        allGroupsDescendingOrder.setText("Absteigend");
        allGroupsDescendingOrder.setOpaque(false);
        allGroupsDescendingOrder.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allGroupsDescendingOrderItemStateChanged(evt);
            }
        });
        allGroupsPanel.add(allGroupsDescendingOrder);
        allGroupsDescendingOrder.setBounds(260, 60, 110, 20);

        groupsPanel.add(allGroupsPanel);
        allGroupsPanel.setBounds(10, 90, 1010, 540);

        getContentPane().add(groupsPanel);
        groupsPanel.setBounds(0, 0, 1010, 630);

        statsPanel.setOpaque(false);
        statsPanel.setLayout(null);

        statsMyGroups.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsMyGroups.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsMyGroups);
        statsMyGroups.setBounds(630, 320, 150, 30);

        statsUsersOnlineLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsUsersOnlineLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsUsersOnlineLabel.setText("| Benutzer Online | =");
        statsPanel.add(statsUsersOnlineLabel);
        statsUsersOnlineLabel.setBounds(330, 150, 300, 33);

        statsTotalUsersLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsTotalUsersLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsTotalUsersLabel.setText("| Benutzer | =");
        statsPanel.add(statsTotalUsersLabel);
        statsTotalUsersLabel.setBounds(330, 120, 300, 33);

        statsTotalGroupsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsTotalGroupsLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsTotalGroupsLabel.setText("| Gruppen | =");
        statsPanel.add(statsTotalGroupsLabel);
        statsTotalGroupsLabel.setBounds(330, 290, 300, 33);

        statsTotalGroups.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsTotalGroups.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsTotalGroups);
        statsTotalGroups.setBounds(630, 290, 150, 30);

        statsMyGroupsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsMyGroupsLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsMyGroupsLabel.setText("| Meine Gruppen | =");
        statsPanel.add(statsMyGroupsLabel);
        statsMyGroupsLabel.setBounds(330, 320, 300, 33);

        statsUsersOnline.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsUsersOnline.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsUsersOnline);
        statsUsersOnline.setBounds(630, 150, 150, 30);

        statsUserMeFriendshipsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsUserMeFriendshipsLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsUserMeFriendshipsLabel.setText("| User --> Ich | =");
        statsPanel.add(statsUserMeFriendshipsLabel);
        statsUserMeFriendshipsLabel.setBounds(330, 520, 300, 33);

        statsDoubledFriendshipLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsDoubledFriendshipLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsDoubledFriendshipLabel.setText("| Ich <--> User | =");
        statsPanel.add(statsDoubledFriendshipLabel);
        statsDoubledFriendshipLabel.setBounds(330, 460, 300, 33);

        statsTotalUsers.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsTotalUsers.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsTotalUsers);
        statsTotalUsers.setBounds(630, 120, 150, 30);

        statsMeUserFriendshipsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsMeUserFriendshipsLabel.setForeground(new java.awt.Color(51, 255, 255));
        statsMeUserFriendshipsLabel.setText("| Ich --> User | =");
        statsPanel.add(statsMeUserFriendshipsLabel);
        statsMeUserFriendshipsLabel.setBounds(330, 490, 300, 33);

        statsMeUserFriendships.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsMeUserFriendships.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsMeUserFriendships);
        statsMeUserFriendships.setBounds(630, 490, 150, 30);

        statsDoubledFriendship.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsDoubledFriendship.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsDoubledFriendship);
        statsDoubledFriendship.setBounds(630, 460, 150, 30);

        statsUserMeFriendships.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsUserMeFriendships.setForeground(new java.awt.Color(102, 255, 255));
        statsPanel.add(statsUserMeFriendships);
        statsUserMeFriendships.setBounds(630, 520, 150, 30);

        statsUserStatsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsUserStatsLabel.setForeground(new java.awt.Color(0, 255, 255));
        statsUserStatsLabel.setText("Statistik über Benutzer:");
        statsPanel.add(statsUserStatsLabel);
        statsUserStatsLabel.setBounds(280, 80, 300, 30);

        statsGroupStatsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsGroupStatsLabel.setForeground(new java.awt.Color(0, 255, 255));
        statsGroupStatsLabel.setText("Statistik über Gruppen:");
        statsPanel.add(statsGroupStatsLabel);
        statsGroupStatsLabel.setBounds(280, 250, 300, 30);

        statsFriendshipStatsLabel.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        statsFriendshipStatsLabel.setForeground(new java.awt.Color(0, 255, 255));
        statsFriendshipStatsLabel.setText("Statistik über Freundschaften:");
        statsPanel.add(statsFriendshipStatsLabel);
        statsFriendshipStatsLabel.setBounds(280, 420, 360, 30);

        getContentPane().add(statsPanel);
        statsPanel.setBounds(0, 0, 1010, 630);

        defaultModelPanel.setOpaque(false);
        defaultModelPanel.setLayout(null);
        getContentPane().add(defaultModelPanel);
        defaultModelPanel.setBounds(0, 0, 1010, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(true);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
        topFiveMessagesFillValues();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void myProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(true);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
    }//GEN-LAST:event_myProfileButtonActionPerformed

    private void groupsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupsButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(true);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
    }//GEN-LAST:event_groupsButtonActionPerformed

    private void usersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(true);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
    }//GEN-LAST:event_usersButtonActionPerformed

    private void messagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(true);
        postsPanel.setVisible(false);
        statsPanel.setVisible(false);
    }//GEN-LAST:event_messagesButtonActionPerformed

    private void postsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postsButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(true);
        statsPanel.setVisible(false);
    }//GEN-LAST:event_postsButtonActionPerformed

    private void statsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        homePanel.setVisible(false);
        myProfilePanel.setVisible(false);
        groupsPanel.setVisible(false);
        usersPanel.setVisible(false);
        messagesPanel.setVisible(false);
        postsPanel.setVisible(false);
        statsPanel.setVisible(true);
    }//GEN-LAST:event_statsButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        try {
            current.server.logOut(current.sessionID);
            WelcomeScreen welcome = new WelcomeScreen();
            welcome.setVisible(true);
            super.dispose();
            current.timer.cancel();
        } 
        catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void myGroupsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myGroupsButtonActionPerformed
        newGroupPanel.setVisible(false);
        allGroupsPanel.setVisible(false);
        myGroupsPanel.setVisible(true);
        try {
            current.server.isTimedOut(current.sessionID);
            Object [] obj = current.server.listMyGroups(current.sessionID).toArray();
            myGroups = toStringArray(obj);
            allGroupsList.setListData(myGroups);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_myGroupsButtonActionPerformed

    private void allGroupsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGroupsButtonActionPerformed
        newGroupPanel.setVisible(false);
        allGroupsPanel.setVisible(true);
        myGroupsPanel.setVisible(false);
        try {
            current.server.isTimedOut(current.sessionID);
            Object [] obj = current.server.listAllGroup().toArray();
            allGroups = toStringArray(obj);
            allGroupsGroupLists.setListData(allGroups);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_allGroupsButtonActionPerformed

    private void newGroupsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGroupsButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        newGroupPanel.setVisible(true);
        allGroupsPanel.setVisible(false);
        myGroupsPanel.setVisible(false);
        newGroupGroupDescription.setText("");
        newGroupGroupName.setText("");
    }//GEN-LAST:event_newGroupsButtonActionPerformed

    private void myGroupsLeaveGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myGroupsLeaveGroupActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            current.server.leaveGroup(current.sessionID, myGroupsGroupName.getText());
            JOptionPane.showMessageDialog(rootPane, "Gruppe verlassen");
            Object [] obj = current.server.listMyGroups(current.sessionID).toArray();
            myGroups = toStringArray(obj);
            allGroupsList.setListData(myGroups);
            myGroupsGroupName.setText("");
            myGroupsLeaveGroup.setEnabled(false);
            myGroupsDescription.setText("");
            myGroupsMembersList.setListData(new Object []{});
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {       
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_myGroupsLeaveGroupActionPerformed

    private void myGroupsAscendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_myGroupsAscendingOrderItemStateChanged
        if(myGroupsAscendingOrder.isSelected()){
            Arrays.sort(myGroups, String.CASE_INSENSITIVE_ORDER);
            allGroupsList.setListData(myGroups);
        }
    }//GEN-LAST:event_myGroupsAscendingOrderItemStateChanged

    private void myGroupsDescendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_myGroupsDescendingOrderItemStateChanged
        if(myGroupsDescendingOrder.isSelected()){
            Arrays.sort(myGroups, Collections.reverseOrder(String.CASE_INSENSITIVE_ORDER));
            allGroupsList.setListData(myGroups);
        }
    }//GEN-LAST:event_myGroupsDescendingOrderItemStateChanged

    private void newGroupCreateGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGroupCreateGroupActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            if(!current.server.groupExists(newGroupGroupName.getText())){
                current.server.addGroup(current.sessionID, newGroupGroupName.getText(), newGroupGroupDescription.getText());
                JOptionPane.showMessageDialog(rootPane, "Gruppe erfolgreich eingetragen");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Gruppe existiert schon");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {       
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newGroupCreateGroupActionPerformed

    private void allGroupsJoinGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGroupsJoinGroupActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            current.server.joinGroup(current.sessionID, allGroupsGroupName.getText());
            JOptionPane.showMessageDialog(rootPane, "Gruppe beigetreten");
            allGroupsJoinGroup.setEnabled(false);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {       
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_allGroupsJoinGroupActionPerformed

    private void allGroupsGroupToSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_allGroupsGroupToSearchCaretUpdate
        if (allGroupsGroupToSearch.getText().contains("'")){
            allGroupsSearchButton.setEnabled(false);
        } else {
            allGroupsSearchButton.setEnabled(true);
        }
    }//GEN-LAST:event_allGroupsGroupToSearchCaretUpdate

    private void allGroupsGroupToSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGroupsGroupToSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allGroupsGroupToSearchActionPerformed

    private void allGroupsSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGroupsSearchButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            Object [] obj = current.server.searchGroup(allGroupsGroupToSearch.getText()).toArray();
            allGroups = toStringArray(obj);
            allGroupsGroupLists.setListData(allGroups);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {       
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_allGroupsSearchButtonActionPerformed

    private void allGroupsAscendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allGroupsAscendingOrderItemStateChanged
        if(allGroupsAscendingOrder.isSelected()){
            Arrays.sort(allGroups, String.CASE_INSENSITIVE_ORDER);
            allGroupsGroupLists.setListData(allGroups);
        }
    }//GEN-LAST:event_allGroupsAscendingOrderItemStateChanged

    private void allGroupsDescendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allGroupsDescendingOrderItemStateChanged
        if(allGroupsDescendingOrder.isSelected()){
            Arrays.sort(allGroups, Collections.reverseOrder(String.CASE_INSENSITIVE_ORDER));
            allGroupsGroupLists.setListData(allGroups);
        }
    }//GEN-LAST:event_allGroupsDescendingOrderItemStateChanged

    private void usersFindFriendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersFindFriendsButtonActionPerformed
        usersFindFriendsPanel.setVisible(true);
        usersMyFriendsPanel.setVisible(false);
        try {
            Object [] obj = current.server.listUser().toArray();
            allUsers = toStringArray(obj);
            usersFindFriendsAllUsers.setListData(allUsers);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_usersFindFriendsButtonActionPerformed

    private void usersMyFriendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersMyFriendsButtonActionPerformed
        usersFindFriendsPanel.setVisible(false);
        usersMyFriendsPanel.setVisible(true);
        if(usersMyFriendsDoubledFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listMutualFriendships(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(usersMyFriendsMeUserFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listFriendsFrom(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(usersMyFriendsUserMeFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listFriendsTo(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_usersMyFriendsButtonActionPerformed

    private void usersMyFriendsUnfriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersMyFriendsUnfriendButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            current.server.unfriend(current.sessionID, usersMyFriendsUsername.getText());
            JOptionPane.showMessageDialog(rootPane, "Freundschaft gelöscht");
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        if(usersMyFriendsDoubledFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listMutualFriendships(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(usersMyFriendsMeUserFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listFriendsFrom(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(usersMyFriendsUserMeFriendshipsRadioButton.isSelected()) {
            try {
                Object [] obj = current.server.listFriendsTo(current.sessionID).toArray();
                friends = toStringArray(obj);
                usersMyFriendsList.setListData(friends);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_usersMyFriendsUnfriendButtonActionPerformed

    private void usersMyFriendsDoubledFriendshipsRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersMyFriendsDoubledFriendshipsRadioButtonItemStateChanged
        try {
            Object [] obj = current.server.listMutualFriendships(current.sessionID).toArray();
            friends = toStringArray(obj);
            usersMyFriendsList.setListData(friends);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersMyFriendsDoubledFriendshipsRadioButtonItemStateChanged

    private void usersMyFriendsMeUserFriendshipsRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersMyFriendsMeUserFriendshipsRadioButtonItemStateChanged
        try {
            Object [] obj = current.server.listFriendsFrom(current.sessionID).toArray();
            friends = toStringArray(obj);
            usersMyFriendsList.setListData(friends);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersMyFriendsMeUserFriendshipsRadioButtonItemStateChanged

    private void usersMyFriendsUserMeFriendshipsRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersMyFriendsUserMeFriendshipsRadioButtonItemStateChanged
        try {
            Object [] obj  = current.server.listFriendsTo(current.sessionID).toArray();
            friends = toStringArray(obj);
            usersMyFriendsList.setListData(friends);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersMyFriendsUserMeFriendshipsRadioButtonItemStateChanged

    private void usersMyFriendsAscendingOrderRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersMyFriendsAscendingOrderRadioButtonItemStateChanged
        if(usersMyFriendsAscendingOrderRadioButton.isSelected()){
            Arrays.sort(friends, String.CASE_INSENSITIVE_ORDER);
            usersMyFriendsList.setListData(friends);
        }
    }//GEN-LAST:event_usersMyFriendsAscendingOrderRadioButtonItemStateChanged

    private void usersMyFriendsDescendingOrderRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersMyFriendsDescendingOrderRadioButtonItemStateChanged
        if(usersMyFriendsDescendingOrderRadioButton.isSelected()){
            Arrays.sort(friends, Collections.reverseOrder(String.CASE_INSENSITIVE_ORDER));
            usersMyFriendsList.setListData(friends);
        }
    }//GEN-LAST:event_usersMyFriendsDescendingOrderRadioButtonItemStateChanged

    private void usersFindFriendsBefriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersFindFriendsBefriendButtonActionPerformed
        boolean successful;
        try {
            current.server.isTimedOut(current.sessionID);
            current.server.addFriend(current.sessionID, usersFindFriendsUsername.getText());
            JOptionPane.showMessageDialog(rootPane, "Freundschaft erfolgreich eingetragen");
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersFindFriendsBefriendButtonActionPerformed

    private void usersFindFriendsSearchTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_usersFindFriendsSearchTextFieldCaretUpdate
        if(usersFindFriendsSearchTextField.getText().contains("'")){
            usersFindFriendsSearchUsernameButton.setEnabled(false);
            usersFindFriendsSearchEMailButton.setEnabled(false);
        } else {
            usersFindFriendsSearchUsernameButton.setEnabled(true);
            usersFindFriendsSearchEMailButton.setEnabled(true);
        }
    }//GEN-LAST:event_usersFindFriendsSearchTextFieldCaretUpdate

    private void usersFindFriendsSearchUsernameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersFindFriendsSearchUsernameButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            Object [] obj = current.server.searchUsername(usersFindFriendsSearchTextField.getText()).toArray();
            allUsers = toStringArray(obj);
            usersFindFriendsAllUsers.setListData(allUsers);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersFindFriendsSearchUsernameButtonActionPerformed

    private void usersFindFriendsSearchEMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersFindFriendsSearchEMailButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            Object [] obj = current.server.searchEmail(usersFindFriendsSearchTextField.getText()).toArray();
            allUsers = toStringArray(obj);
            usersFindFriendsAllUsers.setListData(allUsers);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usersFindFriendsSearchEMailButtonActionPerformed

    private void userFindFriendsAscendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userFindFriendsAscendingOrderItemStateChanged
        if(userFindFriendsAscendingOrder.isSelected()){
            Arrays.sort(allUsers, String.CASE_INSENSITIVE_ORDER);
            usersFindFriendsAllUsers.setListData(allUsers);
        }
    }//GEN-LAST:event_userFindFriendsAscendingOrderItemStateChanged

    private void usersFindFriendsDescendingOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usersFindFriendsDescendingOrderItemStateChanged
        if(usersFindFriendsDescendingOrder.isSelected()){
            Arrays.sort(allUsers, Collections.reverseOrder(String.CASE_INSENSITIVE_ORDER));
            usersFindFriendsAllUsers.setListData(allUsers);
        }
    }//GEN-LAST:event_usersFindFriendsDescendingOrderItemStateChanged

    private void myProfileSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileSubmitButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        String aliasname;
        String name;
        String vorname;
        String email;
        String beschreibung;
        String geburtsdatum;
        boolean successful;
        int day;
        int month;
        int year;

        aliasname = current.username;
        name = myProfileFamilyName.getText();
        vorname = myProfileFirstName.getText();
        email = myProfileEMail.getText();
        beschreibung = myProfileDescription.getText();
        day = Integer.parseInt(myProfileBirthday.getText());
        month = Integer.parseInt(myProfileBirthmonth.getText());
        year = Integer.parseInt(myProfileBirthyear.getText());
        geburtsdatum = String.format("%02d/%02d/%04d", day, month, year);
        try {
            current.server.updateUserInfo(current.sessionID, email, vorname, name, geburtsdatum, beschreibung);
            JOptionPane.showMessageDialog(rootPane, "Neue Daten erfolgreich übertragen");
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_myProfileSubmitButtonActionPerformed

    private void myProfileBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileBackButtonActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        myProfileFirstName.setEditable(false);
        myProfileFamilyName.setEditable(false);
        myProfileEMail.setEditable(false);
        myProfileBirthday.setEditable(false);
        myProfileBirthmonth.setEditable(false);
        myProfileBirthyear.setEditable(false);
        myProfileDescription.setEditable(false);
        userData();

        myProfileOptionButtonsPanel.setVisible(true);
        myProfileChangeDataPanel.setVisible(false);
    }//GEN-LAST:event_myProfileBackButtonActionPerformed

    private void myProfileBirthdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileBirthdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myProfileBirthdayActionPerformed

    private void myProfileBirthmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileBirthmonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myProfileBirthmonthActionPerformed

    private void myProfileChangeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileChangeDataActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        myProfileFirstName.setEditable(true);
        myProfileFamilyName.setEditable(true);
        myProfileEMail.setEditable(true);
        myProfileBirthday.setEditable(true);
        myProfileBirthmonth.setEditable(true);
        myProfileBirthyear.setEditable(true);
        myProfileDescription.setEditable(true);

        myProfileOptionButtonsPanel.setVisible(false);
        myProfileChangeDataPanel.setVisible(true);
        myProfileChangeData.setVisible(true);
        myProfilePanel.setVisible(true);
    }//GEN-LAST:event_myProfileChangeDataActionPerformed

    private void myProfileChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileChangePasswordActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        myProfileProfileDataPanel.setVisible(false);
        myProfileChangePasswordPanel.setVisible(true);
    }//GEN-LAST:event_myProfileChangePasswordActionPerformed

    private void myProfileDeleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileDeleteAccountActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        Delete_Profile delete_profile = new Delete_Profile(current);
        delete_profile.setVisible(true);
    }//GEN-LAST:event_myProfileDeleteAccountActionPerformed

    private void myProfileChangePasswordSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileChangePasswordSubmitActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
            current.server.changePassword(current.sessionID, org.rmi.client.RSA.encode(myProfileChangePasswordOldPassword.getText()), org.rmi.client.RSA.encode(myProfileChangePasswordNewPassword.getText()));
            myProfileProfileDataPanel.setVisible(true);
            myProfileChangePasswordPanel.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_myProfileChangePasswordSubmitActionPerformed

    private void myProfileChangePasswordBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myProfileChangePasswordBackActionPerformed
        try {
            current.server.isTimedOut(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        myProfileChangePasswordPanel.setVisible(false);
        myProfileProfileDataPanel.setVisible(true);
        myProfileOptionButtonsPanel.setVisible(true);
        
        
    }//GEN-LAST:event_myProfileChangePasswordBackActionPerformed

    private void messagesSendMessagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesSendMessagesButtonActionPerformed
        messagesSendMessagesPanel.setVisible(true);
        messagesReadMessagesPanel.setVisible(false);
        messagesSendMessagesSendToAdresseeListButton.setEnabled(false);
        adressees = new DefaultListModel<String>();
        try {
            potentialAdressees = current.server.getAllAdressees(current.sessionID);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        messagesSendMessagesAdresseeList.setModel(adressees);
        messagesSendMessagesPotentialAdresseeList.setModel(potentialAdressees);
    }//GEN-LAST:event_messagesSendMessagesButtonActionPerformed

    private void messagesReadMessagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesReadMessagesButtonActionPerformed
        messagesReadMesagesAllMessages.clearSelection();
        messagesSendMessagesPanel.setVisible(false);
        messagesReadMessagesPanel.setVisible(true);
        try {
            allMessagesModel.resetDataTo(current.server.getAllNews(current.sessionID, "asc"));
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        messagesReadMesagesAllMessages.setModel(allMessagesModel);
    }//GEN-LAST:event_messagesReadMessagesButtonActionPerformed

    private void messagesSendMessagesAddAdresseeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesSendMessagesAddAdresseeButtonActionPerformed
        String temp = potentialAdressees.get(messagesSendMessagesPotentialAdresseeList.getSelectedIndex());
        adressees.addElement(temp);
        potentialAdressees.removeElement(temp);
        adresseesValid = (adressees.getSize() != 0);
        if (messageTitleValid && messageTextValid && adresseesValid){
                messagesSendMessagesSendToAdresseeListButton.setEnabled(true);
        }else{
            messagesSendMessagesSendToAdresseeListButton.setEnabled(false);
        }
        if (potentialAdressees.getSize() == 0){
            messagesSendMessagesAddAdresseeButton.setEnabled(false);
        }
        messagesSendMessagesDeleteAdresseeButton.setEnabled(true);
    }//GEN-LAST:event_messagesSendMessagesAddAdresseeButtonActionPerformed

    private void writePostsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writePostsButtonActionPerformed
        readPostsPanel.setVisible(false);
        writePostsPanel.setVisible(true);
        editPostsPanel.setVisible(false);
    }//GEN-LAST:event_writePostsButtonActionPerformed

    private void readPostsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readPostsButtonActionPerformed
        readPostsPanel.setVisible(true);
        writePostsPanel.setVisible(false);
        editPostsPanel.setVisible(false);
        postsReadPostsAllPosts.clearSelection();
        postsReadPostsAllPosts.setModel(allPostsModel);
        //set values from server function
    }//GEN-LAST:event_readPostsButtonActionPerformed

    private void editPostsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPostsButtonActionPerformed
        readPostsPanel.setVisible(false);
        writePostsPanel.setVisible(false);
        editPostsPanel.setVisible(true);
        postsEditPostsMyPosts.clearSelection();
        postsEditPostsMyPosts.setModel(allPostsModel);
        //set values from server function
    }//GEN-LAST:event_editPostsButtonActionPerformed

    private void messagesSendMessagesDeleteAdresseeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesSendMessagesDeleteAdresseeButtonActionPerformed
        String temp = adressees.get(messagesSendMessagesAdresseeList.getSelectedIndex());
        potentialAdressees.addElement(temp);
        adressees.removeElement(temp);
        adresseesValid = (adressees.getSize() != 0);
        if (messageTitleValid && messageTextValid && adresseesValid){
                messagesSendMessagesSendToAdresseeListButton.setEnabled(true);
        }else{
            messagesSendMessagesSendToAdresseeListButton.setEnabled(false);
        }
        if (adressees.getSize() == 0){
            messagesSendMessagesDeleteAdresseeButton.setEnabled(false);
        }
        messagesSendMessagesAddAdresseeButton.setEnabled(true);
    }//GEN-LAST:event_messagesSendMessagesDeleteAdresseeButtonActionPerformed

    private void messagesSendMessagesSendToAllFriendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesSendMessagesSendToAllFriendsButtonActionPerformed
        // current.server.sendNewsToUsers(current.sessionID, current.server.listFriendsFrom(current.sessionID), messagesSendMessagesMessageTitle.getText(), messagesSendMessagesMessage.getText());
    }//GEN-LAST:event_messagesSendMessagesSendToAllFriendsButtonActionPerformed

    private void postWritePostsPostPublicRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postWritePostsPostPublicRadioButtonActionPerformed
        postTypeValid = true;
    }//GEN-LAST:event_postWritePostsPostPublicRadioButtonActionPerformed

    private void messagesSendMessagesSendToAdresseeListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesSendMessagesSendToAdresseeListButtonActionPerformed
        try{
            if  (messagesSendMessageShowFriendsListRadioButton.isSelected()){
                current.server.sendNewsToUsers(current.sessionID, adressees, messagesSendMessagesMessage.getText(), messagesSendMessagesMessageTitle.getText());
            }else{
                current.server.sendNewsToGroups(current.sessionID, adressees, messagesSendMessagesMessage.getText(), messagesSendMessagesMessageTitle.getText());
            }
            JOptionPane.showMessageDialog(rootPane, "Nachricht wurde gesendet");
            messagesSendMessagesMessageTitle.setText("");
            messagesSendMessagesMessage.setText("");
        } catch (RemoteException ex) {
        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_messagesSendMessagesSendToAdresseeListButtonActionPerformed

    private void messagesReadMessagesMessageReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesReadMessagesMessageReadButtonActionPerformed
        try {
            current.server.markReadNews(current.sessionID, Integer.parseInt((String)(allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(), 5))));
            allMessagesModel.setValueAt((Object)"1",messagesReadMesagesAllMessages.getSelectedRow(), 5);
            JOptionPane.showMessageDialog(rootPane, "Nachricht wurde als gelesen markiert");
            messagesReadMesagesAllMessages.clearSelection();
            allMessagesModel.resetDataTo(current.server.getAllNews(current.sessionID, "asc"));
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_messagesReadMessagesMessageReadButtonActionPerformed

    private void messagesSendMessageShowFriendsListRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_messagesSendMessageShowFriendsListRadioButtonItemStateChanged
        try {
            potentialAdressees = current.server.getAllAdressees(current.sessionID);
            adressees = new DefaultListModel<String>();
            messagesSendMessagesPotentialAdresseeList.setModel(potentialAdressees);
            messagesSendMessagesAdresseeList.setModel(adressees);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        messagesSendMessagesAddAdresseeButton.setEnabled(true);
        messagesSendMessagesDeleteAdresseeButton.setEnabled(false);
    }//GEN-LAST:event_messagesSendMessageShowFriendsListRadioButtonItemStateChanged

    private void messagesSendMessagesShowGroupsradioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_messagesSendMessagesShowGroupsradioButtonItemStateChanged
        try {
            potentialAdressees = current.server.listMyGroups(current.sessionID);
            adressees = new DefaultListModel<String>();
            messagesSendMessagesPotentialAdresseeList.setModel(potentialAdressees);
            messagesSendMessagesAdresseeList.setModel(adressees);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        messagesSendMessagesAddAdresseeButton.setEnabled(true);
        messagesSendMessagesDeleteAdresseeButton.setEnabled(false);
    }//GEN-LAST:event_messagesSendMessagesShowGroupsradioButtonItemStateChanged

    private void messagesReadMessagesDeleteMessageButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesReadMessagesDeleteMessageButton1ActionPerformed
        try {
        current.server.deleteNews(current.sessionID, Integer.parseInt((String)(allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(), 5))));
        JOptionPane.showMessageDialog(rootPane, "Nachricht wurde erfolgreich gelöscht");
        messagesReadMesagesAllMessages.clearSelection();
        allMessagesModel.resetDataTo(current.server.getAllNews(current.sessionID, "asc"));
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_messagesReadMessagesDeleteMessageButton1ActionPerformed

    private void postsReadPostsSearchUsernameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postsReadPostsSearchUsernameButtonActionPerformed
        postsReadPostsAllPosts.clearSelection();
        //allPostsModel.resetDataTo(suche Post nach Username mit postsReadPostsUsername.getText(), current.sessionID))
    }//GEN-LAST:event_postsReadPostsSearchUsernameButtonActionPerformed

    private void postsEditPostsDeletePostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postsEditPostsDeletePostButtonActionPerformed
        // current.server.deletePost(current.sessionID, myPostsModel.getValueAt(postsEditPostsMyPosts.getSelectedRow(),5));
        postsEditPostsMyPosts.clearSelection();
        // myPostsModel.resetData()
    }//GEN-LAST:event_postsEditPostsDeletePostButtonActionPerformed

    private void postsEditPostsSendPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postsEditPostsSendPostButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postsEditPostsSendPostButtonActionPerformed

    private void postsWritePostsSendPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postsWritePostsSendPostButtonActionPerformed
        if (postWritePostsPostPrivateRadioButton.isSelected()){
            //current.server.postPrivatePost(current.sessionId);
            postsWritePostsTopic.setText("");
            postsWritePostsText.setText("");
        }else{
            //current.server.postPublicPost(current.sessionId);
            postsWritePostsTopic.setText("");
            postsWritePostsText.setText("");
        }
        JOptionPane.showMessageDialog(rootPane, "Posts wurde erfolgrreich veröffentlicht");
    }//GEN-LAST:event_postsWritePostsSendPostButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allGroupsAscendingOrder;
    private javax.swing.JToggleButton allGroupsButton;
    private javax.swing.JRadioButton allGroupsDescendingOrder;
    private javax.swing.JTextArea allGroupsGroupDescription;
    private javax.swing.JLabel allGroupsGroupDescriptionLabel;
    private javax.swing.JScrollPane allGroupsGroupDescriptionScrollPane;
    private javax.swing.JScrollPane allGroupsGroupListScrollPane;
    private javax.swing.JList allGroupsGroupLists;
    private javax.swing.JLabel allGroupsGroupName;
    private javax.swing.JLabel allGroupsGroupNameLabel;
    private javax.swing.JLabel allGroupsGroupSearchLabel;
    private javax.swing.JTextField allGroupsGroupToSearch;
    private javax.swing.JButton allGroupsJoinGroup;
    private javax.swing.JList allGroupsList;
    private javax.swing.JScrollPane allGroupsListScrollPane;
    private javax.swing.ButtonGroup allGroupsOrderButtons;
    private javax.swing.JPanel allGroupsPanel;
    private javax.swing.JButton allGroupsSearchButton;
    private javax.swing.JLabel allGroupsSortLabel;
    private javax.swing.JLabel allGroupsTitleLabel;
    private javax.swing.JLabel background;
    private javax.swing.JLabel changePasswordTitleLabel;
    private javax.swing.JPanel defaultModelPanel;
    private javax.swing.JToggleButton editPostsButton;
    private javax.swing.JPanel editPostsPanel;
    private javax.swing.ButtonGroup findFriendsOrderButtons;
    private javax.swing.ButtonGroup groupButtons;
    private javax.swing.JToggleButton groupsButton;
    private javax.swing.JPanel groupsPanel;
    private javax.swing.JToggleButton homeButton;
    private javax.swing.JLabel homeMessageAutor1;
    private javax.swing.JLabel homeMessageAutor2;
    private javax.swing.JLabel homeMessageAutor3;
    private javax.swing.JLabel homeMessageAutor4;
    private javax.swing.JLabel homeMessageAutor5;
    private javax.swing.JLabel homeMessageAutorLabel1;
    private javax.swing.JLabel homeMessageAutorLabel2;
    private javax.swing.JLabel homeMessageAutorLabel3;
    private javax.swing.JLabel homeMessageAutorLabel4;
    private javax.swing.JLabel homeMessageAutorLabel5;
    private javax.swing.JLabel homeMessageDate1;
    private javax.swing.JLabel homeMessageDate2;
    private javax.swing.JLabel homeMessageDate3;
    private javax.swing.JLabel homeMessageDate4;
    private javax.swing.JLabel homeMessageDate5;
    private javax.swing.JLabel homeMessageDateLabel1;
    private javax.swing.JLabel homeMessageDateLabel2;
    private javax.swing.JLabel homeMessageDateLabel3;
    private javax.swing.JLabel homeMessageDateLabel4;
    private javax.swing.JLabel homeMessageDateLabel5;
    private javax.swing.JLabel homeMessageStatus1;
    private javax.swing.JLabel homeMessageStatus2;
    private javax.swing.JLabel homeMessageStatus3;
    private javax.swing.JLabel homeMessageStatus4;
    private javax.swing.JLabel homeMessageStatus5;
    private javax.swing.JLabel homeMessageStatusLabel1;
    private javax.swing.JLabel homeMessageStatusLabel2;
    private javax.swing.JLabel homeMessageStatusLabel3;
    private javax.swing.JLabel homeMessageStatusLabel4;
    private javax.swing.JLabel homeMessageStatusLabel5;
    private javax.swing.JTextArea homeMessageText1;
    private javax.swing.JTextArea homeMessageText2;
    private javax.swing.JTextArea homeMessageText3;
    private javax.swing.JTextArea homeMessageText4;
    private javax.swing.JTextArea homeMessageText5;
    private javax.swing.JLabel homeMessageTopic1;
    private javax.swing.JLabel homeMessageTopic2;
    private javax.swing.JLabel homeMessageTopic3;
    private javax.swing.JLabel homeMessageTopic4;
    private javax.swing.JLabel homeMessageTopic5;
    private javax.swing.JLabel homeMessageTopicLabel1;
    private javax.swing.JLabel homeMessageTopicLabel2;
    private javax.swing.JLabel homeMessageTopicLabel3;
    private javax.swing.JLabel homeMessageTopicLabel4;
    private javax.swing.JLabel homeMessageTopicLabel5;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JToggleButton logOutButton;
    private javax.swing.ButtonGroup menuBar;
    private javax.swing.JToggleButton messagesButton;
    private javax.swing.ButtonGroup messagesNavgationButtons;
    private javax.swing.JPanel messagesPanel;
    private javax.swing.JTable messagesReadMesagesAllMessages;
    private javax.swing.JScrollPane messagesReadMesagesAllMessagesScrollPane;
    private javax.swing.JToggleButton messagesReadMessagesButton;
    private javax.swing.JButton messagesReadMessagesDeleteMessageButton1;
    private javax.swing.JLabel messagesReadMessagesMessageAutor;
    private javax.swing.JLabel messagesReadMessagesMessageAutorLabel;
    private javax.swing.JLabel messagesReadMessagesMessageDate;
    private javax.swing.JLabel messagesReadMessagesMessageDateLabel;
    private javax.swing.JButton messagesReadMessagesMessageReadButton;
    private javax.swing.JTextArea messagesReadMessagesMessageText;
    private javax.swing.JLabel messagesReadMessagesMessageTextLabel;
    private javax.swing.JScrollPane messagesReadMessagesMessageTextScrollPane;
    private javax.swing.JLabel messagesReadMessagesMessageTitle;
    private javax.swing.JLabel messagesReadMessagesMessageTitleLabel;
    private javax.swing.JPanel messagesReadMessagesPanel;
    private javax.swing.JRadioButton messagesSendMessageShowFriendsListRadioButton;
    private javax.swing.JButton messagesSendMessagesAddAdresseeButton;
    private javax.swing.JLabel messagesSendMessagesAdresseeLabel;
    private javax.swing.JList messagesSendMessagesAdresseeList;
    private javax.swing.JScrollPane messagesSendMessagesAdresseeScrollPane;
    private javax.swing.JToggleButton messagesSendMessagesButton;
    private javax.swing.JButton messagesSendMessagesDeleteAdresseeButton;
    private javax.swing.JTextArea messagesSendMessagesMessage;
    private javax.swing.JLabel messagesSendMessagesMessageCheck;
    private javax.swing.JLabel messagesSendMessagesMessageLabel;
    private javax.swing.JScrollPane messagesSendMessagesMessageScrollPane;
    private javax.swing.JTextField messagesSendMessagesMessageTitle;
    private javax.swing.JLabel messagesSendMessagesMessageTitleLabel;
    private javax.swing.JPanel messagesSendMessagesPanel;
    private javax.swing.JList messagesSendMessagesPotentialAdresseeList;
    private javax.swing.JScrollPane messagesSendMessagesPotentialAdresseeScrollPane;
    private javax.swing.JLabel messagesSendMessagesSendLabel;
    private javax.swing.JButton messagesSendMessagesSendToAdresseeListButton;
    private javax.swing.JButton messagesSendMessagesSendToAllFriendsButton;
    private javax.swing.JRadioButton messagesSendMessagesShowGroupsradioButton;
    private javax.swing.JLabel messagesSendMessagesTitleCheck;
    private javax.swing.ButtonGroup myFriendsFriendshipTypesButtons;
    private javax.swing.ButtonGroup myFriendsOrderButtons;
    private javax.swing.JRadioButton myGroupsAscendingOrder;
    private javax.swing.JToggleButton myGroupsButton;
    private javax.swing.JRadioButton myGroupsDescendingOrder;
    private javax.swing.JTextArea myGroupsDescription;
    private javax.swing.JScrollPane myGroupsDescriptionScrollPane;
    private javax.swing.JLabel myGroupsGroupDescriptionLabel;
    private javax.swing.JLabel myGroupsGroupName;
    private javax.swing.JLabel myGroupsGroupNameLabel;
    private javax.swing.JButton myGroupsLeaveGroup;
    private javax.swing.JLabel myGroupsMemberLabel;
    private javax.swing.JList myGroupsMembersList;
    private javax.swing.JScrollPane myGroupsMembersListScrollPane;
    private javax.swing.ButtonGroup myGroupsOrderButtons;
    private javax.swing.JPanel myGroupsPanel;
    private javax.swing.JLabel myGroupsSortLabel;
    private javax.swing.JLabel myGroupsTitleLabel;
    private javax.swing.JButton myProfileBackButton;
    private javax.swing.JLabel myProfileBirthdateLabel;
    private javax.swing.JTextField myProfileBirthday;
    private javax.swing.JLabel myProfileBirthdayCheck;
    private javax.swing.JTextField myProfileBirthmonth;
    private javax.swing.JTextField myProfileBirthyear;
    private javax.swing.JToggleButton myProfileButton;
    private javax.swing.JButton myProfileChangeData;
    private javax.swing.JPanel myProfileChangeDataPanel;
    private javax.swing.JButton myProfileChangePassword;
    private javax.swing.JButton myProfileChangePasswordBack;
    private javax.swing.JPasswordField myProfileChangePasswordNewPassword;
    private javax.swing.JLabel myProfileChangePasswordNewPasswordCheck;
    private javax.swing.JLabel myProfileChangePasswordNewPasswordLabel;
    private javax.swing.JPasswordField myProfileChangePasswordNewPasswordRepeat;
    private javax.swing.JLabel myProfileChangePasswordNewPasswordRepeatCheck;
    private javax.swing.JLabel myProfileChangePasswordNewPasswordRepeatLabel;
    private javax.swing.JPasswordField myProfileChangePasswordOldPassword;
    private javax.swing.JLabel myProfileChangePasswordOldPasswordLabel;
    private javax.swing.JPanel myProfileChangePasswordPanel;
    private javax.swing.JButton myProfileChangePasswordSubmit;
    private javax.swing.JButton myProfileDeleteAccount;
    private javax.swing.JTextArea myProfileDescription;
    private javax.swing.JLabel myProfileDescriptionCheck;
    private javax.swing.JLabel myProfileDescriptionLabel;
    private javax.swing.JScrollPane myProfileDescriptionScrollPane;
    private javax.swing.JTextField myProfileEMail;
    private javax.swing.JLabel myProfileEMailCheck;
    private javax.swing.JLabel myProfileEMailLabel;
    private javax.swing.JLabel myProfileFailyNameLabel;
    private javax.swing.JTextField myProfileFamilyName;
    private javax.swing.JLabel myProfileFamilyNameCheck;
    private javax.swing.JTextField myProfileFirstName;
    private javax.swing.JLabel myProfileFirstNameCheck;
    private javax.swing.JLabel myProfileFirstNameLabel;
    private javax.swing.JPanel myProfileOptionButtonsPanel;
    private javax.swing.JPanel myProfilePanel;
    private javax.swing.JPanel myProfileProfileDataPanel;
    private javax.swing.JButton myProfileSubmitButton;
    private javax.swing.JLabel myProfileTitelLabel;
    private javax.swing.JButton newGroupCreateGroup;
    private javax.swing.JTextArea newGroupGroupDescription;
    private javax.swing.JScrollPane newGroupGroupDescriptionScrollPane;
    private javax.swing.JLabel newGroupGroupDescritionCheck;
    private javax.swing.JTextField newGroupGroupName;
    private javax.swing.JLabel newGroupGroupNameCheck;
    private javax.swing.JLabel newGroupGroupNameLabel;
    private javax.swing.JPanel newGroupPanel;
    private javax.swing.JLabel newGroupTitleLabel;
    private javax.swing.JToggleButton newGroupsButton;
    private javax.swing.JRadioButton postWritePostsPostPrivateRadioButton;
    private javax.swing.JRadioButton postWritePostsPostPublicRadioButton;
    private javax.swing.JLabel postWritePostsTextCheck;
    private javax.swing.JLabel postWritePostsTopicCheck;
    private javax.swing.JToggleButton postsButton;
    private javax.swing.ButtonGroup postsButtons;
    private javax.swing.JLabel postsEditPostsDate;
    private javax.swing.JLabel postsEditPostsDateLabel;
    private javax.swing.JButton postsEditPostsDeletePostButton;
    private javax.swing.JTable postsEditPostsMyPosts;
    private javax.swing.JScrollPane postsEditPostsMyPostsScrollPane;
    private javax.swing.JButton postsEditPostsSendPostButton;
    private javax.swing.JTextArea postsEditPostsText;
    private javax.swing.JLabel postsEditPostsTextCheck;
    private javax.swing.JLabel postsEditPostsTextLabel;
    private javax.swing.JScrollPane postsEditPostsTextScrollPane;
    private javax.swing.JTextField postsEditPostsTopic;
    private javax.swing.JLabel postsEditPostsTopicCheck;
    private javax.swing.JLabel postsEditPostsTopicLabel;
    private javax.swing.JPanel postsPanel;
    private javax.swing.JTable postsReadPostsAllPosts;
    private javax.swing.JScrollPane postsReadPostsAllPostsScrollPane;
    private javax.swing.JLabel postsReadPostsAutor;
    private javax.swing.JLabel postsReadPostsAutorLabel;
    private javax.swing.JLabel postsReadPostsDate;
    private javax.swing.JLabel postsReadPostsDateLabel;
    private javax.swing.JButton postsReadPostsSearchUsernameButton;
    private javax.swing.JTextArea postsReadPostsText;
    private javax.swing.JLabel postsReadPostsTextLabel;
    private javax.swing.JScrollPane postsReadPostsTextLabelScrollPane;
    private javax.swing.JLabel postsReadPostsTopic;
    private javax.swing.JLabel postsReadPostsTopicLabel;
    private javax.swing.JTextField postsReadPostsUsername;
    private javax.swing.JLabel postsReadPostsUsernameLabel;
    private javax.swing.JButton postsReadPostsVoteButton;
    private javax.swing.JButton postsWritePostsSendPostButton;
    private javax.swing.JTextArea postsWritePostsText;
    private javax.swing.JLabel postsWritePostsTextLabel;
    private javax.swing.JScrollPane postsWritePostsTextScrollPane;
    private javax.swing.JLabel postsWritePostsTitleLabel;
    private javax.swing.JTextField postsWritePostsTopic;
    private javax.swing.JLabel postsWritePostsTopicLabel;
    private javax.swing.ButtonGroup readMessagesNavigationButtons;
    private javax.swing.JToggleButton readPostsButton;
    private javax.swing.JPanel readPostsPanel;
    private javax.swing.ButtonGroup sendMessagesNavigationButtons;
    private javax.swing.JToggleButton statsButton;
    private javax.swing.JLabel statsDoubledFriendship;
    private javax.swing.JLabel statsDoubledFriendshipLabel;
    private javax.swing.JLabel statsFriendshipStatsLabel;
    private javax.swing.JLabel statsGroupStatsLabel;
    private javax.swing.JLabel statsMeUserFriendships;
    private javax.swing.JLabel statsMeUserFriendshipsLabel;
    private javax.swing.JLabel statsMyGroups;
    private javax.swing.JLabel statsMyGroupsLabel;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JLabel statsTotalGroups;
    private javax.swing.JLabel statsTotalGroupsLabel;
    private javax.swing.JLabel statsTotalUsers;
    private javax.swing.JLabel statsTotalUsersLabel;
    private javax.swing.JLabel statsUserMeFriendships;
    private javax.swing.JLabel statsUserMeFriendshipsLabel;
    private javax.swing.JLabel statsUserStatsLabel;
    private javax.swing.JLabel statsUsersOnline;
    private javax.swing.JLabel statsUsersOnlineLabel;
    private javax.swing.JRadioButton userFindFriendsAscendingOrder;
    public static javax.swing.JLabel userLogedInLabel;
    private javax.swing.ButtonGroup userNavigationButtons;
    private javax.swing.JToggleButton usersButton;
    private javax.swing.JList usersFindFriendsAllUsers;
    private javax.swing.JScrollPane usersFindFriendsAllUsersScrollPane;
    private javax.swing.JButton usersFindFriendsBefriendButton;
    private javax.swing.JToggleButton usersFindFriendsButton;
    private javax.swing.JRadioButton usersFindFriendsDescendingOrder;
    private javax.swing.JTextArea usersFindFriendsDescription;
    private javax.swing.JLabel usersFindFriendsDescriptionLabel;
    private javax.swing.JScrollPane usersFindFriendsDescriptionScrollPane;
    private javax.swing.JLabel usersFindFriendsFamilyName;
    private javax.swing.JLabel usersFindFriendsFamilyNameLabel;
    private javax.swing.JLabel usersFindFriendsFirstName;
    private javax.swing.JLabel usersFindFriendsFirstNameLabel;
    private javax.swing.JPanel usersFindFriendsPanel;
    private javax.swing.JButton usersFindFriendsSearchEMailButton;
    private javax.swing.JLabel usersFindFriendsSearchLabel;
    private javax.swing.JTextField usersFindFriendsSearchTextField;
    private javax.swing.JButton usersFindFriendsSearchUsernameButton;
    private javax.swing.JLabel usersFindFriendsSortLabel;
    private javax.swing.JLabel usersFindFriendsUsername;
    private javax.swing.JLabel usersFindFriendsUsernameLabel;
    private javax.swing.JRadioButton usersMyFriendsAscendingOrderRadioButton;
    private javax.swing.JToggleButton usersMyFriendsButton;
    private javax.swing.JRadioButton usersMyFriendsDescendingOrderRadioButton;
    private javax.swing.JTextArea usersMyFriendsDescription;
    private javax.swing.JLabel usersMyFriendsDescriptionLabel;
    private javax.swing.JRadioButton usersMyFriendsDoubledFriendshipsRadioButton;
    private javax.swing.JLabel usersMyFriendsFamilyName;
    private javax.swing.JLabel usersMyFriendsFamilyNameLabel;
    private javax.swing.JLabel usersMyFriendsFirstName;
    private javax.swing.JLabel usersMyFriendsFirstNameLabel;
    private javax.swing.JList usersMyFriendsList;
    private javax.swing.JRadioButton usersMyFriendsMeUserFriendshipsRadioButton;
    private javax.swing.JPanel usersMyFriendsPanel;
    private javax.swing.JScrollPane usersMyFriendsScrollPane;
    private javax.swing.JLabel usersMyFriendsSortLabel;
    private javax.swing.JButton usersMyFriendsUnfriendButton;
    private javax.swing.JRadioButton usersMyFriendsUserMeFriendshipsRadioButton;
    private javax.swing.JLabel usersMyFriendsUsername;
    private javax.swing.JLabel usersMyFriendsUsernameLabel;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JToggleButton writePostsButton;
    private javax.swing.ButtonGroup writePostsNavigationButtons;
    private javax.swing.JPanel writePostsPanel;
    // End of variables declaration//GEN-END:variables
Icon tick;
Icon cross;
boolean groupNameValid;
boolean groupDescriptionValid;
String [] allGroups;
String [] myGroups;
Object [] groupMembers;
String [] allUsers;
String [] friends;
boolean firstNameValid;
boolean familyNameValid;
boolean eMailValid;
boolean birthDateValid;
boolean descriptionValid;
boolean passwordValid;
boolean passwordRepValid;
boolean messageTitleValid;
boolean messageTextValid;
DefaultListModel<String> potentialAdressees;
DefaultListModel<String> adressees;
boolean adresseesValid;
MessageTableModel allMessagesModel = new MessageTableModel();
boolean postTopicValid;
boolean postTextValid;
boolean postTypeValid;
ReadPostsTableModel allPostsModel = new ReadPostsTableModel();
EditPostsTableModel myPostsModel = new EditPostsTableModel();
boolean editPostsTopicValid;
boolean editPostsTextValid;
    
    private void GroupsAddListeners() {
        GroupsInputHandler ih = new GroupsInputHandler();
        newGroupGroupName.addCaretListener(ih);
        newGroupGroupDescription.addCaretListener(ih);
        AllGroupsListenHandler lh = new AllGroupsListenHandler();
        allGroupsGroupLists.addListSelectionListener(lh);
        MyGroupsListenHandler lh2 = new MyGroupsListenHandler();
        allGroupsList.addListSelectionListener(lh2);
    }

    private void ReadMessageAddListeners() {
        messagesReadMesagesAllMessages.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (evt.getValueIsAdjusting()){
                    messagesReadMessagesMessageTitle.setText((String) allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(),1));
                    messagesReadMessagesMessageAutor.setText((String) allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(),0));
                    messagesReadMessagesMessageDate.setText((String) allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(),2));
                    messagesReadMessagesMessageText.setText((String) allMessagesModel.getValueAt(messagesReadMesagesAllMessages.getSelectedRow(),4));
                }
            }
        });
    
    }

    private class GroupsInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            groupNameValid = !newGroupGroupName.getText().equals("") && (!newGroupGroupName.getText().contains("'"));

            int tmp = newGroupGroupDescription.getText().length();
            groupDescriptionValid = ((tmp >= 1) && (tmp <= 256)) && (!newGroupGroupDescription.getText().contains("'"));
            //set ticks
            if (groupNameValid){
                    newGroupGroupNameCheck.setIcon(tick);
            }else{
                    newGroupGroupNameCheck.setIcon(cross);
            }
            if (groupDescriptionValid){
                    newGroupGroupDescritionCheck.setIcon(tick);
            }else{
                    newGroupGroupDescritionCheck.setIcon(cross);
            }

            if (groupNameValid && groupDescriptionValid){
                    newGroupCreateGroup.setEnabled(true);
            }else{
                    newGroupCreateGroup.setEnabled(false);
            }
        }
    }
    private class AllGroupsListenHandler implements ListSelectionListener{

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(e.getValueIsAdjusting()){
                String sel = (String)allGroups[allGroupsGroupLists.getSelectedIndex()];
                allGroupsGroupName.setText(sel);
                try {
                    current.server.isTimedOut(current.sessionID);
                    allGroupsGroupDescription.setText(current.server.getGroupTopic(sel));
                    if (current.server.isMember(current.sessionID, sel)){
                        allGroupsJoinGroup.setEnabled(false);
                    }else{
                        allGroupsJoinGroup.setEnabled(true);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }	
    }
    
    private class MyGroupsListenHandler implements ListSelectionListener{

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(e.getValueIsAdjusting()){
                String sel = (String)myGroups[allGroupsList.getSelectedIndex()];
                myGroupsGroupName.setText(sel);
                try {
                    current.server.isTimedOut(current.sessionID);
                    myGroupsDescription.setText(current.server.getGroupTopic(sel));
                    groupMembers = current.server.listMember(sel).toArray();
                    myGroupsMembersList.setListData(groupMembers);
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                myGroupsLeaveGroup.setEnabled(true);
            }
        }
    }
    public static String[] toStringArray(Object[] obj){
		String [] str = new String[obj.length];
		for(int i = 0; i < obj.length; i++){
			str[i] = (String)obj[i];
		}
		return str;
	}
    
    private void fillValues() {
        try {
            statsTotalUsers.setText(String.valueOf(current.server.listUser().getSize()));
            statsMeUserFriendships.setText(String.valueOf(current.server.listFriendsFrom(current.sessionID).getSize()));
            statsUserMeFriendships.setText(String.valueOf(current.server.listFriendsTo(current.sessionID).getSize()));
            statsDoubledFriendship.setText(String.valueOf(current.server.listMutualFriendships(current.sessionID).getSize()));
            statsUsersOnline.setText(String.valueOf(current.server.countOnlineUser()));
            statsTotalGroups.setText(String.valueOf(current.server.listAllGroup().getSize()));
            statsMyGroups.setText(String.valueOf(current.server.listMyGroups(current.sessionID).getSize()));            
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private class FindFriendsListenHandler implements ListSelectionListener{

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(e.getValueIsAdjusting()){
                String sel = (String)allUsers[usersFindFriendsAllUsers.getSelectedIndex()];
                usersFindFriendsUsername.setText(sel);
                try {
                    current.server.isTimedOut(current.sessionID);
                    ArrayList<String> props = current.server.getPublicInfo(sel);
                    usersFindFriendsFirstName.setText(props.get(1));
                    usersFindFriendsFamilyName.setText(props.get(2));
                    usersFindFriendsDescription.setText(props.get(4));
                    if (current.server.isFriend(current.sessionID, sel) || sel.equals(current.username)){
                        usersFindFriendsBefriendButton.setEnabled(false);
                    }else{
                        usersFindFriendsBefriendButton.setEnabled(true);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }	
    }
    
    private class MyFriendsListenHandler implements ListSelectionListener{

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(e.getValueIsAdjusting()){
                String sel = (String)friends[usersMyFriendsList.getSelectedIndex()];
                usersMyFriendsUsername.setText(sel);
                try {
                    current.server.isTimedOut(current.sessionID);
                    ArrayList<String> props = current.server.getPublicInfo(sel);
                    usersMyFriendsFirstName.setText(props.get(1));
                    usersMyFriendsFamilyName.setText(props.get(2));
                    usersMyFriendsDescription.setText(props.get(4));
                    if (current.server.isFriend(current.sessionID, sel)){
                        usersMyFriendsUnfriendButton.setEnabled(true);
                    }else{
                        usersMyFriendsUnfriendButton.setEnabled(false);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }	
    }
    private void userData(){
        try {
            ArrayList<String> info = current.server.getInfo(current.sessionID);
            myProfileEMail.setText(info.get(0));
            myProfileFirstName.setText(info.get(1));
            myProfileFamilyName.setText(info.get(2));
            String[] xs = info.get(3).split("/");
            myProfileBirthday.setText(xs[0]);
            myProfileBirthmonth.setText(xs[1]);
            myProfileBirthyear.setText(xs[2]);
            myProfileDescription.setText(info.get(4));
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MyProfileAddListeners() {
        MyProfileInputHandler ih = new MyProfileInputHandler();
        myProfileFirstName.addCaretListener(ih);
        myProfileFamilyName.addCaretListener(ih);
        myProfileEMail.addCaretListener(ih);
        myProfileBirthday.addCaretListener(ih);
        myProfileBirthmonth.addCaretListener(ih);
        myProfileBirthyear.addCaretListener(ih);
        myProfileDescription.addCaretListener(ih);
    }
    
    private class MyProfileInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            firstNameValid = !myProfileFirstName.getText().equals("") && (!myProfileFirstName.getText().contains("'"));
            familyNameValid = !myProfileFamilyName.getText().equals("") && (!myProfileFamilyName.getText().contains("'"));
            String[] parts;
            parts = myProfileEMail.getText().split("@");
            if (parts.length == 2){
                    if (parts[1].contains(".")){
                            eMailValid = (!myProfileEMail.getText().contains("'"));
                    }else{
                            eMailValid = false;
                    }
            }else{
                    eMailValid = false;
            }


            try{
                    int day = Integer.parseInt(myProfileBirthday.getText());
                    int month = Integer.parseInt(myProfileBirthmonth.getText());
                    int year = Integer.parseInt(myProfileBirthyear.getText());
                    if (day > 31 || day < 1 || month > 12 || month < 1 || year < 1850){
                            birthDateValid = false;
                    }else{
                            birthDateValid = true;
                    }
            }catch (Exception ex){
                    birthDateValid = false;
            }


            int tmp = myProfileDescription.getText().length();
            descriptionValid = ((tmp >= 1) && (tmp <= 256)) && (!myProfileDescription.getText().contains("'"));
            //set ticks
            if (firstNameValid){
                    myProfileFirstNameCheck.setIcon(tick);
            }else{
                    myProfileFirstNameCheck.setIcon(cross);
            }
            if (familyNameValid){
                    myProfileFamilyNameCheck.setIcon(tick);
            }else{
                    myProfileFamilyNameCheck.setIcon(cross);
            }
            if (eMailValid){
                    myProfileEMailCheck.setIcon(tick);
            }else{
                    myProfileEMailCheck.setIcon(cross);
            }
            
            if (birthDateValid){
                    myProfileBirthdayCheck.setIcon(tick);
            }else{
                    myProfileBirthdayCheck.setIcon(cross);
            }
            if (descriptionValid){
                    myProfileDescriptionCheck.setIcon(tick);
            }else{
                    myProfileDescriptionCheck.setIcon(cross);
            }

            if (firstNameValid && familyNameValid && eMailValid && birthDateValid && descriptionValid){
                    myProfileSubmitButton.setEnabled(true);
            }else{
                    myProfileSubmitButton.setEnabled(false);
            }
        }
    }
    private void ChangePasswordAddListeners() {
        ChangePasswordInputHandler ih = new ChangePasswordInputHandler();
	myProfileChangePasswordNewPassword.addCaretListener(ih);
	myProfileChangePasswordNewPasswordRepeat.addCaretListener(ih);

    }

    private class ChangePasswordInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            int tmp = myProfileChangePasswordNewPassword.getText().length();
            passwordValid = ((tmp >= 8) && (tmp <= 20)) && (!myProfileChangePasswordNewPassword.getText().contains("'"));
            
            tmp = myProfileChangePasswordNewPasswordRepeat.getText().length();
            passwordRepValid = myProfileChangePasswordNewPasswordRepeat.getText().equals(myProfileChangePasswordNewPassword.getText()) && ((tmp >= 8) && (tmp <= 20)) && (!myProfileChangePasswordNewPasswordRepeat.getText().contains("'"));

            //set ticks
            if (passwordValid){
                    myProfileChangePasswordNewPasswordCheck.setIcon(tick);
            }else{
                    myProfileChangePasswordNewPasswordCheck.setIcon(cross);
            }
            if (passwordRepValid){
                    myProfileChangePasswordNewPasswordRepeatCheck.setIcon(tick);
            }else{
                    myProfileChangePasswordNewPasswordRepeatCheck.setIcon(cross);
            }
            
            if (passwordValid && passwordRepValid){
                    myProfileChangePasswordSubmit.setEnabled(true);
            }else{
                    myProfileChangePasswordSubmit.setEnabled(false);
            }
        }
    }
    private void SendMessageAddListeners() {
        SendMessageInputHandler ih = new SendMessageInputHandler();
        messagesSendMessagesMessageTitle.addCaretListener(ih);
        messagesSendMessagesMessage.addCaretListener(ih);
    }
    
    private class SendMessageInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            messageTitleValid = !messagesSendMessagesMessageTitle.getText().equals("") && (!messagesSendMessagesMessageTitle.getText().contains("'"));
            messageTextValid = !messagesSendMessagesMessage.getText().equals("") && (!messagesSendMessagesMessage.getText().contains("'"));
            adresseesValid = (adressees.getSize() != 0);
            
            //set ticks
            if (messageTitleValid){
                    messagesSendMessagesTitleCheck.setIcon(tick);
            }else{
                    messagesSendMessagesTitleCheck.setIcon(cross);
            }
            if (messageTextValid){
                    messagesSendMessagesMessageCheck.setIcon(tick);
            }else{
                    messagesSendMessagesMessageCheck.setIcon(cross);
            }
            if (messageTitleValid && messageTextValid){
                    messagesSendMessagesSendToAllFriendsButton.setEnabled(true);
            }else{
                    messagesSendMessagesSendToAllFriendsButton.setEnabled(false);
            }
            if (messageTitleValid && messageTextValid && adresseesValid){
                messagesSendMessagesSendToAdresseeListButton.setEnabled(true);
            }else{
                messagesSendMessagesSendToAdresseeListButton.setEnabled(false);
            }
        }
    }
 
    private void WritePostAddListeners() {
        writePostInputHandler ih = new writePostInputHandler();
        postsWritePostsTopic.addCaretListener(ih);
        postsWritePostsText.addCaretListener(ih);
    }
    
    private class writePostInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            postTopicValid = !postsWritePostsTopic.getText().equals("") && (!postsWritePostsTopic.getText().contains("'"));

            int tmp = postsWritePostsText.getText().length();
            postTextValid = ((tmp >= 1) && (tmp <= 1024)) && (!postsWritePostsText.getText().contains("'"));
            
            if ((postWritePostsPostPrivateRadioButton.isSelected() || postWritePostsPostPublicRadioButton.isSelected())){
                postTypeValid = true;
            }
            //set ticks
            if (postTopicValid){
                    postWritePostsTopicCheck.setIcon(tick);
            }else{
                    postWritePostsTopicCheck.setIcon(cross);
            }
            if (postTextValid){
                    postWritePostsTextCheck.setIcon(tick);
            }else{
                    postWritePostsTextCheck.setIcon(cross);
            }

            if (postTopicValid && postTextValid && postTypeValid){
                    postsWritePostsSendPostButton.setEnabled(true);
            }else{
                    postsWritePostsSendPostButton.setEnabled(false);
            }
        }
    }
    public abstract class MyTableModel implements TableModel {
	DefaultListModel<TableModelListener> listeners;
	DefaultListModel<String[]> data;
	
	public MyTableModel(){
		listeners = new DefaultListModel<TableModelListener>();
		this.data = new DefaultListModel<String[]>();
	}
	
        public void resetDataTo(DefaultListModel<String[]> data){
            this.data.clear();
            for(int i = 0; i < data.getSize(); i++){
			addLine(data.get(i));
		}
	}
        
	public void setData(DefaultListModel<String[]> data){
		for(int i = 0; i < data.getSize(); i++){
			addLine(data.get(i));
		}
	}
	
	public void addLine( String[] line ){
		// Index of new element
		int index = data.size();
		data.addElement(line);
 
 
		// create Event, "new Row at index"
		TableModelEvent e = new TableModelEvent( this, index, index, TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT );
 
		// inform listeners
		for( int i = 0, n = listeners.size(); i<n; i++ ){
			((TableModelListener)listeners.get( i )).tableChanged( e );
		}
	}
	
	@Override
	public Class<?> getColumnClass(int arg0) {
		return String.class;
	}

	@Override
	public int getRowCount() {
		return data.getSize();
	}
	
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return false;
	}
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		return data.get(rowIndex)[columnIndex];
	}
	
	@Override
	public void setValueAt(Object value, int rowIndex, int columnIndex) {
		data.get(rowIndex)[columnIndex] = (String)value;
		
	}

	@Override
	public void addTableModelListener(TableModelListener tml) {
		listeners.addElement(tml);
	}
	
	@Override
	public void removeTableModelListener(TableModelListener tml) {
		listeners.removeElement(tml);
	}
} 

public class MessageTableModel extends MyTableModel{
	public MessageTableModel(){
		super();
	}

	@Override
	public int getColumnCount() {
		return 4;
	}

	@Override
	public String getColumnName(int columnIndex) {
		switch(columnIndex){
		case 0:  return "Absender";
		case 1:  return "Betreff";
		case 2:  return "Datum";
		case 3:  return "Gelesen";//als String 1 gelesen 0 sonst
        //case 4:  return "NewsText";
        //case 5:  return "NewsID";   // als String
		default: return null;
		}
	}
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		if(columnIndex == 3){
			if(((String)data.get(rowIndex)[columnIndex]).equals("0")){
				return "nicht gelesen";
			}else{
				return "gelesen";
			}
		}else{
			return data.get(rowIndex)[columnIndex];
		}
	}
}

public class ReadPostsTableModel extends MyTableModel {
	public ReadPostsTableModel() {
		super();
	}
	
	@Override
	public int getColumnCount() {
		return 4;
	}

	@Override
	public String getColumnName(int columnIndex) {
		switch(columnIndex){
		case 0:  return "Thema";
		case 1:  return "Autor";
		case 2:  return "Datum";
		case 3:  return "Rating"; // als String
		//case 4:  return "PostText";
		//case 5:  return "PostID";   // als String
		default: return null;
		}
	}
}

public class EditPostsTableModel extends MyTableModel {
	public EditPostsTableModel() {
		super();
	}

	@Override
	public int getColumnCount() {
		return 2;
	}

	@Override
	public String getColumnName(int columnIndex) {
		switch(columnIndex){
		case 0:  return "Thema";
		case 1:  return "Datum";
        //case 2:  return "PostText";
        //case 3:  return "PostID";   // als String
		default: return null;
		}
	}
    }

    private void ReadPostsAddListeners() {
        postsReadPostsAllPosts.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (evt.getValueIsAdjusting()){
                    postsReadPostsTopic.setText((String) allPostsModel.getValueAt(postsReadPostsAllPosts.getSelectedRow(),0));
                    postsReadPostsAutor.setText((String) allPostsModel.getValueAt(postsReadPostsAllPosts.getSelectedRow(),1));
                    postsReadPostsDate.setText((String) allPostsModel.getValueAt(postsReadPostsAllPosts.getSelectedRow(),2));
                    postsReadPostsText.setText((String) allPostsModel.getValueAt(postsReadPostsAllPosts.getSelectedRow(),4));
                    /*if (allPostsModel.getValueAt(postsReadPostsAllPosts.getSelectedRow(),5){
                        postsReadPostsVoteButton.setText("Unvote");
                    }else{
                        postsReadPostsVoteButton.setText("Vote");
                    }
                    */
                }
            }
        });
    }
    
    private class EditPostsInputHandler implements CaretListener{

        @Override
        public void caretUpdate(CaretEvent e) {
            editPostsTopicValid = !postsEditPostsTopic.getText().equals("") && (!postsEditPostsTopic.getText().contains("'"));

            int tmp = postsEditPostsText.getText().length();
            editPostsTextValid = ((tmp >= 1) && (tmp <= 1024)) && (!postsEditPostsText.getText().contains("'"));
            //set ticks
            if (editPostsTopicValid){
                    postsEditPostsTopicCheck.setIcon(tick);
            }else{
                    postsEditPostsTopicCheck.setIcon(cross);
            }
            if (editPostsTextValid){
                    postsEditPostsTextCheck.setIcon(tick);
            }else{
                    postsEditPostsTextCheck.setIcon(cross);
            }

            if (editPostsTopicValid && editPostsTextValid){
                    postsEditPostsSendPostButton.setEnabled(true);
            }else{
                    postsEditPostsSendPostButton.setEnabled(false);
            }
        }
    }
    
    private void EditPostsAddListeners() {
        EditPostsInputHandler ih = new EditPostsInputHandler();
        postsEditPostsTopic.addCaretListener(ih);
        postsEditPostsText.addCaretListener(ih);
        
        postsEditPostsMyPosts.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (evt.getValueIsAdjusting()){
                    postsEditPostsTopic.setText((String) myPostsModel.getValueAt(postsEditPostsMyPosts.getSelectedRow(),0));
                    postsEditPostsDate.setText((String) myPostsModel.getValueAt(postsEditPostsMyPosts.getSelectedRow(),1));
                    postsEditPostsText.setText((String) myPostsModel.getValueAt(postsEditPostsMyPosts.getSelectedRow(),2));
                    /*if (myPostsModel.getValueAt(postsEditPostsMyPosts.getSelectedRow(),3){
                        postsReadPostsVoteButton.setText("Unvote");
                    }else{
                        postsReadPostsVoteButton.setText("Vote");
                    }
                    */
                }
            }
        });
    }
    
    private void topFiveMessagesFillValues() {        
        try {
            DefaultListModel <String[]> messages = current.server.getAllNews(current.sessionID, "no");
            String[] current_message;
            if (messages.size() >= 1){
                current_message = messages.get(messages.size()-1);
                homeMessageAutor1.setText(current_message[0]);
                homeMessageTopic1.setText(current_message[1]);
                homeMessageDate1.setText(current_message[2]);
                homeMessageStatus1.setText(statusToString(current_message[3]));
                homeMessageText1.setText(current_message[4]);
            }else{
                homeMessageAutor1.setText("");
                homeMessageTopic1.setText("");
                homeMessageDate1.setText("");
                homeMessageStatus1.setText("");
                homeMessageText1.setText("");
            }
            if (messages.size() >= 2){
                current_message = messages.get(messages.size()-2);
                homeMessageAutor2.setText(current_message[0]);
                homeMessageTopic2.setText(current_message[1]);
                homeMessageDate2.setText(current_message[2]);
                homeMessageStatus2.setText(statusToString(current_message[3]));
                homeMessageText2.setText(current_message[4]);
            }else{
                homeMessageAutor2.setText("");
                homeMessageTopic2.setText("");
                homeMessageDate2.setText("");
                homeMessageStatus2.setText("");
                homeMessageText2.setText("");
            }
            if (messages.size() >= 3){
                current_message = messages.get(messages.size()-3);
                homeMessageAutor3.setText(current_message[0]);
                homeMessageTopic3.setText(current_message[1]);
                homeMessageDate3.setText(current_message[2]);
                homeMessageStatus3.setText(statusToString(current_message[3]));
                homeMessageText3.setText(current_message[4]);
            }else{
                homeMessageAutor3.setText("");
                homeMessageTopic3.setText("");
                homeMessageDate3.setText("");
                homeMessageStatus3.setText("");
                homeMessageText3.setText("");
            }
            if (messages.size() >= 4){
                current_message = messages.get(messages.size()-4);
                homeMessageAutor4.setText(current_message[0]);
                homeMessageTopic4.setText(current_message[1]);
                homeMessageDate4.setText(current_message[2]);
                homeMessageStatus4.setText(statusToString(current_message[3]));
                homeMessageText4.setText(current_message[4]);
            }else{
                homeMessageAutor4.setText("");
                homeMessageTopic4.setText("");
                homeMessageDate4.setText("");
                homeMessageStatus4.setText("");
                homeMessageText4.setText("");
            }
            if (messages.size() >= 5){
                current_message = messages.get(messages.size()-5);
                homeMessageAutor5.setText(current_message[0]);
                homeMessageTopic5.setText(current_message[1]);
                homeMessageDate5.setText(current_message[2]);
                homeMessageStatus5.setText(statusToString(current_message[3]));
                homeMessageText5.setText(current_message[4]);
            }else{
                homeMessageAutor5.setText("");
                homeMessageTopic5.setText("");
                homeMessageDate5.setText("");
                homeMessageStatus5.setText("");
                homeMessageText5.setText("");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String statusToString (String a){
        if (a.equals("0")){
            return "Nicht gelesen";
        }
        return "Gelesen";
    }
}